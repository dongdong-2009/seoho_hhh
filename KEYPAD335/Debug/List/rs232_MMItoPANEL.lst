###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR    10/Aug/2011  15:40:02 #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\work\SEOHO_VD\SEOHO_Keypad\KEYPAD335_110810_SEOHO\sou #
#                    rce\mcu\rs232_MMItoPANEL.c                               #
#    Command line =  D:\work\SEOHO_VD\SEOHO_Keypad\KEYPAD335_110810_SEOHO\sou #
#                    rce\mcu\rs232_MMItoPANEL.c --cpu=m2560 -ms -o            #
#                    D:\work\SEOHO_VD\SEOHO_Keypad\KEYPAD335_110810_SEOHO\Deb #
#                    ug\Obj\ -lC D:\work\SEOHO_VD\SEOHO_Keypad\KEYPAD335_1108 #
#                    10_SEOHO\Debug\List\ -lA D:\work\SEOHO_VD\SEOHO_Keypad\K #
#                    EYPAD335_110810_SEOHO\Debug\List\ -y                     #
#                    --initializers_in_flash -z3 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug --enable_external_bus                  #
#                    -DENABLE_BIT_DEFINITIONS -e --enable_multibytes -I       #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.3\avr\INC\" -I "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 5.3\avr\INC\CLIB\" --eeprom_size 4096          #
#    List file    =  D:\work\SEOHO_VD\SEOHO_Keypad\KEYPAD335_110810_SEOHO\Deb #
#                    ug\List\rs232_MMItoPANEL.lst                             #
#    Object file  =  D:\work\SEOHO_VD\SEOHO_Keypad\KEYPAD335_110810_SEOHO\Deb #
#                    ug\Obj\rs232_MMItoPANEL.r90                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\work\SEOHO_VD\SEOHO_Keypad\KEYPAD335_110810_SEOHO\source\mcu\rs232_MMItoPANEL.c
      1          //==============================================================================================
      2          //
      3          // Copyright(C) 2008 HanYoung ELEC. Co., LTD.
      4          // Designed by Paul B.H Park(idonno2000)
      5          //
      6          //
      7          //	filename : serial.c
      8          //	description : 시리얼통신 함수 정의
      9          //
     10          //	history : 2008-05-09 4:03오후
     11          //            2008-06-26 - 링퍼버 수신모듈 구성
     12          //                       - 송신부분은 테스트중
     13          //                       - 관련문서 ( ringbuffer.doc )
     14          //                                  ( 링버퍼 패킷송수신.vsd) 
     15          //           2008-08-20 - printf함수 포함
     16          //                              - 링버퍼 수신모듈 리턴인자 수정 (0or1)
     17          //           1010-03-03 - MINV MMI to CTRL_PANEL간 통신 전용
     18          //                              - 기존의 링버퍼를 활용하여 자기자신의 데이터가 변할蒻?//===============================================================================================
     19          
     20          //#include <avr/io.h>
     21          //#include <avr/interrupt.h>
     22          //#include <util/delay.h>
     23          
     24          #include <inavr.h>
     25          #include <iom2560.h>

   \                                 In  segment ABSOLUTE, at 0xc6
   \   <__C115> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   <__C119> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   <__C123> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   <__C126> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   <__C129> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1
     26          
     27          #include <string.h>
     28          #include "type.h"
     29          #include "util.h"
     30          #include "rs232_MMItoPANEL.h"
     31          
     32          #include "display.h"
     33          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     34          CRC_flg	CRC ;
   \                     CRC:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     35          Data_flg	data_flg;
   \                     data_flg:
   \   00000000                      DS8 2
     36          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     37          unsigned int Communication_Fault_Cnt = 3;
   \                     Communication_Fault_Cnt:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for Communication_Fault_Cnt>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     38          unsigned char Communication_Fault_Flag = 0;
   \                     Communication_Fault_Flag:
   \   00000000                      DS8 1
     39          
     40          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     41          unsigned int SCI_Registers[BUF_MAX];
   \                     SCI_Registers:
   \   00000000                      DS8 6800
     42          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     43          unsigned char packet[8];
   \                     packet:
   \   00000000                      DS8 8
     44          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     45          static const UCHAR aucCRCHi[] = {
   \                     aucCRCHi:
   \   00000000                      DS8 256
   \   00000100                      REQUIRE `?<Initializer for aucCRCHi>`
     46              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     47              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     48              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     49              0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     50              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     51              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     52              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     53              0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     54              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     55              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     56              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     57              0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     58              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     59              0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     60              0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     61              0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     62              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
     63              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     64              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     65              0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     66              0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     67              0x00, 0xC1, 0x81, 0x40
     68          };
     69          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     70          static const UCHAR aucCRCLo[] = {
   \                     aucCRCLo:
   \   00000000                      DS8 256
   \   00000100                      REQUIRE `?<Initializer for aucCRCLo>`
     71              0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
     72              0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
     73              0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
     74              0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
     75              0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
     76              0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
     77              0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
     78              0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 
     79              0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
     80              0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
     81              0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
     82              0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
     83              0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 
     84              0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
     85              0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
     86              0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
     87              0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
     88              0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
     89              0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
     90              0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
     91              0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
     92              0x41, 0x81, 0x80, 0x40
     93          };
     94          
     95          

   \                                 In  segment FARCODE, align 2, keep-with-next
     96          unsigned int CRC16( UCHAR * pucFrame,unsigned int usLen )
   \                     CRC16:
     97          {
   \   00000000   2F59               MOV     R21, R25
   \   00000002   2E28               MOV     R2, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     98              UCHAR           ucCRCHi = 0xFF;
   \   00000006   EF4F               LDI     R20, 255
     99              UCHAR           ucCRCLo = 0xFF;
   \   00000008   EF6F               LDI     R22, 255
   \   0000000A   C012               RJMP    ??CRC16_0
    100              int             iIndex;
    101          
    102              while( usLen-- )
    103              {
    104                  iIndex = ucCRCLo ^ *( pucFrame++ );
   \                     ??CRC16_1:
   \   0000000C   2E06               MOV     R0, R22
   \   0000000E   2411               CLR     R1
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   8100               LD      R16, Z
   \   00000014   E010               LDI     R17, 0
   \   00000016   2600               EOR     R0, R16
   \   00000018   2611               EOR     R1, R17
   \   0000001A   9601               ADIW    R25:R24, 1
    105                  ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
   \   0000001C   01F0               MOVW    R31:R30, R1:R0
   \   0000001E   ....               SUBI    R30, LOW((-(aucCRCHi) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(aucCRCHi) & 0xFFFF) >> 8
   \   00000022   8100               LD      R16, Z
   \   00000024   2740               EOR     R20, R16
   \   00000026   2F64               MOV     R22, R20
    106                  ucCRCHi = aucCRCLo[iIndex];
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(aucCRCLo) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(aucCRCLo) & 0xFFFF) >> 8
   \   0000002E   8140               LD      R20, Z
    107              }
   \                     ??CRC16_0:
   \   00000030   0189               MOVW    R17:R16, R19:R18
   \   00000032   0198               MOVW    R19:R18, R17:R16
   \   00000034   5021               SUBI    R18, 1
   \   00000036   4030               SBCI    R19, 0
   \   00000038   2B01               OR      R16, R17
   \   0000003A   F741               BRNE    ??CRC16_1
    108              return ( unsigned int )( ucCRCHi << 8 | ucCRCLo );
   \   0000003C   2F14               MOV     R17, R20
   \   0000003E   E000               LDI     R16, 0
   \   00000040   E070               LDI     R23, 0
   \   00000042   2B06               OR      R16, R22
   \   00000044   2B17               OR      R17, R23
   \   00000046   2D82               MOV     R24, R2
   \   00000048   2F95               MOV     R25, R21
   \   0000004A   9508               RET
    109          }
    110          
    111          
    112          
    113          //==============================================================
    114          // UART  initialize

   \                                 In  segment FARCODE, align 2, keep-with-next
    115          void UART_init(void)
   \                     UART_init:
    116          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    117          	UBRR0H = 0; 								// 19200 baud for 16MHz OSC
   \   00000000   E000               LDI     R16, 0
   \   00000002   930000C5           STS     197, R16
    118          	UBRR0L = 8;
   \   00000006   E008               LDI     R16, 8
   \   00000008   9300....           STS     _A_UBRR0, R16
    119          	UCSR0A = 0x00;								// asynchronous normal mode
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     _A_UCSR0A, R16
    120          	UCSR0B = 0xD8;								// Rx/Tx enbale, Rx Complete interrupt enable
   \   00000012   ED08               LDI     R16, 216
   \   00000014   9300....           STS     _A_UCSR0B, R16
    121          	UCSR0C = 0x06;								// 8 data, 1 stop, no parity
   \   00000018   E006               LDI     R16, 6
   \   0000001A   9300....           STS     _A_UCSR0C, R16
    122          
    123          #if 0
    124          	//timer 3 인터럽트
    125          	TCCR3A = 0x10;
    126          	TCCR3B = 0x0C;
    127          	TCCR3C = 0x00;
    128          	OCR3A = 62;//1ms
    129          	TCNT3 = 0x0000;
    130          
    131          	TIMSK3 = 0x02;
    132          	TIFR3 = 0x2F;
    133          #endif
    134          
    135          
    136          	CRC.Word = 0 ;
   \   0000001E   E000               LDI     R16, 0
   \   00000020   E010               LDI     R17, 0
   \   00000022   9300....           STS     CRC, R16
   \   00000026   9310....           STS     (CRC + 1), R17
    137          
    138          }
   \   0000002A   9508               RET
   \   0000002C                      REQUIRE _A_UBRR0
   \   0000002C                      REQUIRE _A_UCSR0C
   \   0000002C                      REQUIRE _A_UCSR0B
   \   0000002C                      REQUIRE _A_UCSR0A
    139          
    140          

   \                                 In  segment FARCODE, align 2, keep-with-next
    141          void WriteDataMem(unsigned int addr, unsigned int dat)
   \                     WriteDataMem:
    142          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    143          	//*(volatile int *)(DATA_REG + (addr<<1)+0) = (char)(dat>>8);
    144          	//*(volatile int *)(DATA_REG + (addr<<1)+1) = (char)dat;
    145          	DATA_Registers[addr] = dat;
   \   00000000   0F00               LSL     R16
   \   00000002   1F11               ROL     R17
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000008   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000000A   8320               ST      Z, R18
   \   0000000C   8331               STD     Z+1, R19
    146          }
   \   0000000E   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
    147          unsigned int ReadDataMem(unsigned int addr)
   \                     ReadDataMem:
    148          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    149          	unsigned int data_word = 0;
   \   00000000   E020               LDI     R18, 0
   \   00000002   E030               LDI     R19, 0
    150          	//data_word =  MAKEWORD( (*(volatile int *)(DATA_REG + (addr<<1)+0 )),(*(volatile int *)(DATA_REG + (addr<<1)+1)) );
    151          	data_word = DATA_Registers[addr];
   \   00000004   0F00               LSL     R16
   \   00000006   1F11               ROL     R17
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000000E   8100               LD      R16, Z
   \   00000010   8111               LDD     R17, Z+1
   \   00000012   0198               MOVW    R19:R18, R17:R16
    152           	return data_word;
   \   00000014   0189               MOVW    R17:R16, R19:R18
   \   00000016   9508               RET
    153          }
    154          //-----------------------------
    155          // 데이타 수신
    156          //-----------------------------

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    157           unsigned char SciC_RxStep=0;
   \                     SciC_RxStep:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    158           volatile unsigned char SciC_RxFlag=0;
   \                     SciC_RxFlag:
   \   00000000                      DS8 1
    159          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    160           unsigned int RxType=0;
   \                     RxType:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    161           unsigned int RxAddr=0;
   \                     RxAddr:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    162           unsigned int RxData=0;
   \                     RxData:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    163           unsigned int RxCRC=0;
   \                     RxCRC:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    164           unsigned char RxBuf[9];
   \                     RxBuf:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    165           unsigned char RXD0;
   \                     RXD0:
   \   00000000                      DS8 1
    166          
    167          #pragma vector = USART0_RX_vect

   \                                 In  segment FARCODE, align 2, keep-with-next
    168          __interrupt void USART0_RX_ISR(void)
   \                     USART0_RX_ISR:
    169          //ISR(USART0_RX_vect)	
    170          {
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A   93FA               ST      -Y, R31
   \   0000000C   93EA               ST      -Y, R30
   \   0000000E   923A               ST      -Y, R3
   \   00000010   922A               ST      -Y, R2
   \   00000012   921A               ST      -Y, R1
   \   00000014   920A               ST      -Y, R0
   \   00000016   937A               ST      -Y, R23
   \   00000018   936A               ST      -Y, R22
   \   0000001A   935A               ST      -Y, R21
   \   0000001C   934A               ST      -Y, R20
   \   0000001E   933A               ST      -Y, R19
   \   00000020   932A               ST      -Y, R18
   \   00000022   931A               ST      -Y, R17
   \   00000024   930A               ST      -Y, R16
   \   00000026   B7AF               IN      R26, 0x3F
   \   00000028   B7BB               IN      R27, 0x3B
   \   0000002A   B64C               IN      R4, 0x3C
   \   0000002C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000002C                      REQUIRE __RSTACK_in_external_ram_new_way
    171          	char c;
    172          
    173          	RXD0 = UDR0 ;
   \   0000002C   9100....           LDS     R16, _A_UDR0
   \   00000030   9300....           STS     RXD0, R16
    174          	if(!SciC_RxFlag)
   \   00000034   9100....           LDS     R16, SciC_RxFlag
   \   00000038   2300               TST     R16
   \   0000003A   F009               BREQ    $+2+2
   \   0000003C   C179               RJMP    ??USART0_RX_ISR_0
    175          	{
    176          		if(SciC_RxStep == 0)//sync1
   \   0000003E   9100....           LDS     R16, SciC_RxStep
   \   00000042   2300               TST     R16
   \   00000044   F489               BRNE    ??USART0_RX_ISR_1
    177          		{
    178          			if(RXD0 == 0xAB)
   \   00000046   9100....           LDS     R16, RXD0
   \   0000004A   3A0B               CPI     R16, 171
   \   0000004C   F449               BRNE    ??USART0_RX_ISR_2
    179          			{
    180          				
    181          				RxBuf[0] = 0xAB;
   \   0000004E   EA0B               LDI     R16, 171
   \   00000050   9300....           STS     RxBuf, R16
    182          				SciC_RxStep++;
   \   00000054   9100....           LDS     R16, SciC_RxStep
   \   00000058   9503               INC     R16
   \   0000005A   9300....           STS     SciC_RxStep, R16
   \   0000005E   C168               RJMP    ??USART0_RX_ISR_0
    183          			}
    184          			else SciC_RxStep=0;
   \                     ??USART0_RX_ISR_2:
   \   00000060   E000               LDI     R16, 0
   \   00000062   9300....           STS     SciC_RxStep, R16
   \   00000066   C164               RJMP    ??USART0_RX_ISR_0
    185          		}
    186          		else if(SciC_RxStep == 1)//sync2
   \                     ??USART0_RX_ISR_1:
   \   00000068   9100....           LDS     R16, SciC_RxStep
   \   0000006C   3001               CPI     R16, 1
   \   0000006E   F489               BRNE    ??USART0_RX_ISR_3
    187          		{
    188          			if(RXD0 == 0xCD)
   \   00000070   9100....           LDS     R16, RXD0
   \   00000074   3C0D               CPI     R16, 205
   \   00000076   F449               BRNE    ??USART0_RX_ISR_4
    189          			{
    190          				RxBuf[1] = 0xCD;
   \   00000078   EC0D               LDI     R16, 205
   \   0000007A   9300....           STS     (RxBuf + 1), R16
    191          				SciC_RxStep++;
   \   0000007E   9100....           LDS     R16, SciC_RxStep
   \   00000082   9503               INC     R16
   \   00000084   9300....           STS     SciC_RxStep, R16
   \   00000088   C153               RJMP    ??USART0_RX_ISR_0
    192          			}
    193          			else SciC_RxStep=0;
   \                     ??USART0_RX_ISR_4:
   \   0000008A   E000               LDI     R16, 0
   \   0000008C   9300....           STS     SciC_RxStep, R16
   \   00000090   C14F               RJMP    ??USART0_RX_ISR_0
    194          		}
    195          		else if(SciC_RxStep == 2)//type
   \                     ??USART0_RX_ISR_3:
   \   00000092   9100....           LDS     R16, SciC_RxStep
   \   00000096   3002               CPI     R16, 2
   \   00000098   F451               BRNE    ??USART0_RX_ISR_5
    196          		{
    197          			RxBuf[2] = RXD0;
   \   0000009A   9100....           LDS     R16, RXD0
   \   0000009E   9300....           STS     (RxBuf + 2), R16
    198          			SciC_RxStep++;
   \   000000A2   9100....           LDS     R16, SciC_RxStep
   \   000000A6   9503               INC     R16
   \   000000A8   9300....           STS     SciC_RxStep, R16
   \   000000AC   C141               RJMP    ??USART0_RX_ISR_0
    199          		}
    200          		else if(SciC_RxStep == 3)//addr_h
   \                     ??USART0_RX_ISR_5:
   \   000000AE   9100....           LDS     R16, SciC_RxStep
   \   000000B2   3003               CPI     R16, 3
   \   000000B4   F451               BRNE    ??USART0_RX_ISR_6
    201          		{
    202          			RxBuf[3] = RXD0;
   \   000000B6   9100....           LDS     R16, RXD0
   \   000000BA   9300....           STS     (RxBuf + 3), R16
    203          			SciC_RxStep++;
   \   000000BE   9100....           LDS     R16, SciC_RxStep
   \   000000C2   9503               INC     R16
   \   000000C4   9300....           STS     SciC_RxStep, R16
   \   000000C8   C133               RJMP    ??USART0_RX_ISR_0
    204          		}
    205          		else if(SciC_RxStep == 4)//addr_l
   \                     ??USART0_RX_ISR_6:
   \   000000CA   9100....           LDS     R16, SciC_RxStep
   \   000000CE   3004               CPI     R16, 4
   \   000000D0   F451               BRNE    ??USART0_RX_ISR_7
    206          		{
    207          			RxBuf[4] = RXD0;
   \   000000D2   9100....           LDS     R16, RXD0
   \   000000D6   9300....           STS     (RxBuf + 4), R16
    208          			SciC_RxStep++;
   \   000000DA   9100....           LDS     R16, SciC_RxStep
   \   000000DE   9503               INC     R16
   \   000000E0   9300....           STS     SciC_RxStep, R16
   \   000000E4   C125               RJMP    ??USART0_RX_ISR_0
    209          		}
    210          		else if(SciC_RxStep == 5)//data_h
   \                     ??USART0_RX_ISR_7:
   \   000000E6   9100....           LDS     R16, SciC_RxStep
   \   000000EA   3005               CPI     R16, 5
   \   000000EC   F451               BRNE    ??USART0_RX_ISR_8
    211          		{
    212          			RxBuf[5] = RXD0;
   \   000000EE   9100....           LDS     R16, RXD0
   \   000000F2   9300....           STS     (RxBuf + 5), R16
    213          			SciC_RxStep++;
   \   000000F6   9100....           LDS     R16, SciC_RxStep
   \   000000FA   9503               INC     R16
   \   000000FC   9300....           STS     SciC_RxStep, R16
   \   00000100   C117               RJMP    ??USART0_RX_ISR_0
    214          		}
    215          		else if(SciC_RxStep == 6)//data_l
   \                     ??USART0_RX_ISR_8:
   \   00000102   9100....           LDS     R16, SciC_RxStep
   \   00000106   3006               CPI     R16, 6
   \   00000108   F451               BRNE    ??USART0_RX_ISR_9
    216          		{
    217          			RxBuf[6] = RXD0;
   \   0000010A   9100....           LDS     R16, RXD0
   \   0000010E   9300....           STS     (RxBuf + 6), R16
    218          			SciC_RxStep++;
   \   00000112   9100....           LDS     R16, SciC_RxStep
   \   00000116   9503               INC     R16
   \   00000118   9300....           STS     SciC_RxStep, R16
   \   0000011C   C109               RJMP    ??USART0_RX_ISR_0
    219          		}
    220          		else if(SciC_RxStep == 7)//crc_H
   \                     ??USART0_RX_ISR_9:
   \   0000011E   9100....           LDS     R16, SciC_RxStep
   \   00000122   3007               CPI     R16, 7
   \   00000124   F451               BRNE    ??USART0_RX_ISR_10
    221          		{
    222          			RxBuf[7] = RXD0;
   \   00000126   9100....           LDS     R16, RXD0
   \   0000012A   9300....           STS     (RxBuf + 7), R16
    223          			SciC_RxStep++;
   \   0000012E   9100....           LDS     R16, SciC_RxStep
   \   00000132   9503               INC     R16
   \   00000134   9300....           STS     SciC_RxStep, R16
   \   00000138   C0FB               RJMP    ??USART0_RX_ISR_0
    224          		}
    225          		else//crc_L
    226          		{
    227          			RxBuf[8] = RXD0;
   \                     ??USART0_RX_ISR_10:
   \   0000013A   9100....           LDS     R16, RXD0
   \   0000013E   9300....           STS     (RxBuf + 8), R16
    228          			SciC_RxFlag = 1;
   \   00000142   E001               LDI     R16, 1
   \   00000144   9300....           STS     SciC_RxFlag, R16
    229          
    230          			 if(SciC_RxFlag)
   \   00000148   9100....           LDS     R16, SciC_RxFlag
   \   0000014C   2300               TST     R16
   \   0000014E   F409               BRNE    $+2+2
   \   00000150   C0EF               RJMP    ??USART0_RX_ISR_0
    231          		      	{
    232          					CRC.Word = CRC16(RxBuf,7);
   \   00000152   E027               LDI     R18, 7
   \   00000154   E030               LDI     R19, 0
   \   00000156   ....               LDI     R16, LOW(RxBuf)
   \   00000158   ....               LDI     R17, (RxBuf) >> 8
   \   0000015A   ....               RCALL   CRC16
   \   0000015C   9300....           STS     CRC, R16
   \   00000160   9310....           STS     (CRC + 1), R17
    233          
    234          					if((RxBuf[7] == CRC.Byte.b1) && (RxBuf[8] == CRC.Byte.b0))
   \   00000164   9100....           LDS     R16, (RxBuf + 7)
   \   00000168   9110....           LDS     R17, (CRC + 1)
   \   0000016C   1701               CP      R16, R17
   \   0000016E   F009               BREQ    $+2+2
   \   00000170   C0DC               RJMP    ??USART0_RX_ISR_11
   \   00000172   9100....           LDS     R16, (RxBuf + 8)
   \   00000176   9110....           LDS     R17, CRC
   \   0000017A   1701               CP      R16, R17
   \   0000017C   F009               BREQ    $+2+2
   \   0000017E   C0D5               RJMP    ??USART0_RX_ISR_11
    235          					{
    236          						RxType = RxBuf[2];
   \   00000180   9100....           LDS     R16, (RxBuf + 2)
   \   00000184   E010               LDI     R17, 0
   \   00000186   9300....           STS     RxType, R16
   \   0000018A   9310....           STS     (RxType + 1), R17
    237          						RxAddr = ((unsigned int)RxBuf[3]<<8) | RxBuf[4] ;
   \   0000018E   9130....           LDS     R19, (RxBuf + 3)
   \   00000192   E020               LDI     R18, 0
   \   00000194   9100....           LDS     R16, (RxBuf + 4)
   \   00000198   E010               LDI     R17, 0
   \   0000019A   2B20               OR      R18, R16
   \   0000019C   2B31               OR      R19, R17
   \   0000019E   9320....           STS     RxAddr, R18
   \   000001A2   9330....           STS     (RxAddr + 1), R19
    238          						RxData = ((unsigned int)RxBuf[5]<<8) | RxBuf[6] ;
   \   000001A6   9130....           LDS     R19, (RxBuf + 5)
   \   000001AA   E020               LDI     R18, 0
   \   000001AC   9100....           LDS     R16, (RxBuf + 6)
   \   000001B0   E010               LDI     R17, 0
   \   000001B2   2B20               OR      R18, R16
   \   000001B4   2B31               OR      R19, R17
   \   000001B6   9320....           STS     RxData, R18
   \   000001BA   9330....           STS     (RxData + 1), R19
    239          						RxCRC   = ((unsigned int)RxBuf[7]<<8) | RxBuf[8] ;
   \   000001BE   9130....           LDS     R19, (RxBuf + 7)
   \   000001C2   E020               LDI     R18, 0
   \   000001C4   9100....           LDS     R16, (RxBuf + 8)
   \   000001C8   E010               LDI     R17, 0
   \   000001CA   2B20               OR      R18, R16
   \   000001CC   2B31               OR      R19, R17
   \   000001CE   9320....           STS     RxCRC, R18
   \   000001D2   9330....           STS     (RxCRC + 1), R19
    240          
    241          						if(RxType == SEND)
   \   000001D6   9100....           LDS     R16, RxType
   \   000001DA   9110....           LDS     R17, (RxType + 1)
   \   000001DE   3002               CPI     R16, 2
   \   000001E0   E020               LDI     R18, 0
   \   000001E2   0712               CPC     R17, R18
   \   000001E4   F599               BRNE    ??USART0_RX_ISR_12
    242          						{
    243          							CRC.Word = 0;
   \   000001E6   E000               LDI     R16, 0
   \   000001E8   E010               LDI     R17, 0
   \   000001EA   9300....           STS     CRC, R16
   \   000001EE   9310....           STS     (CRC + 1), R17
    244          
    245          							RxBuf[2] = RESPONSE;
   \   000001F2   E003               LDI     R16, 3
   \   000001F4   9300....           STS     (RxBuf + 2), R16
    246          
    247          							CRC.Word = CRC16(RxBuf,7);
   \   000001F8   E027               LDI     R18, 7
   \   000001FA   E030               LDI     R19, 0
   \   000001FC   ....               LDI     R16, LOW(RxBuf)
   \   000001FE   ....               LDI     R17, (RxBuf) >> 8
   \   00000200   ....               RCALL   CRC16
   \   00000202   9300....           STS     CRC, R16
   \   00000206   9310....           STS     (CRC + 1), R17
    248          
    249          							for(c=0;c<7;c++)	TX0_char(RxBuf[c]);
   \   0000020A   E080               LDI     R24, 0
   \   0000020C   C007               RJMP    ??USART0_RX_ISR_13
   \                     ??USART0_RX_ISR_14:
   \   0000020E   E090               LDI     R25, 0
   \   00000210   01FC               MOVW    R31:R30, R25:R24
   \   00000212   ....               SUBI    R30, LOW((-(RxBuf) & 0xFFFF))
   \   00000214   ....               SBCI    R31, (-(RxBuf) & 0xFFFF) >> 8
   \   00000216   8100               LD      R16, Z
   \   00000218   ....               RCALL   TX0_char
   \   0000021A   9583               INC     R24
   \                     ??USART0_RX_ISR_13:
   \   0000021C   3087               CPI     R24, 7
   \   0000021E   F3B8               BRCS    ??USART0_RX_ISR_14
    250          							TX0_char(CRC.Byte.b1);
   \   00000220   9100....           LDS     R16, (CRC + 1)
   \   00000224   ....               RCALL   TX0_char
    251          							TX0_char(CRC.Byte.b0);
   \   00000226   9100....           LDS     R16, CRC
   \   0000022A   ....               RCALL   TX0_char
    252          
    253          							DATA_Registers[RxAddr] = RxData;
   \   0000022C   9120....           LDS     R18, RxData
   \   00000230   9130....           LDS     R19, (RxData + 1)
   \   00000234   9100....           LDS     R16, RxAddr
   \   00000238   9110....           LDS     R17, (RxAddr + 1)
   \   0000023C   0F00               LSL     R16
   \   0000023E   1F11               ROL     R17
   \   00000240   01F8               MOVW    R31:R30, R17:R16
   \   00000242   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000244   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   00000246   8320               ST      Z, R18
   \   00000248   8331               STD     Z+1, R19
   \   0000024A   C06F               RJMP    ??USART0_RX_ISR_11
    254          						}
    255          						else if(RxType == REQUEST)
   \                     ??USART0_RX_ISR_12:
   \   0000024C   9100....           LDS     R16, RxType
   \   00000250   9110....           LDS     R17, (RxType + 1)
   \   00000254   3004               CPI     R16, 4
   \   00000256   E020               LDI     R18, 0
   \   00000258   0712               CPC     R17, R18
   \   0000025A   F5E9               BRNE    ??USART0_RX_ISR_15
    256          						{
    257          							CRC.Word = 0;
   \   0000025C   E000               LDI     R16, 0
   \   0000025E   E010               LDI     R17, 0
   \   00000260   9300....           STS     CRC, R16
   \   00000264   9310....           STS     (CRC + 1), R17
    258          
    259          							RxBuf[2] = SEND;
   \   00000268   E002               LDI     R16, 2
   \   0000026A   9300....           STS     (RxBuf + 2), R16
    260          							RxBuf[5] = (char)(DATA_Registers[RxAddr]>>8);
   \   0000026E   9100....           LDS     R16, RxAddr
   \   00000272   9110....           LDS     R17, (RxAddr + 1)
   \   00000276   0F00               LSL     R16
   \   00000278   1F11               ROL     R17
   \   0000027A   01F8               MOVW    R31:R30, R17:R16
   \   0000027C   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   0000027E   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   00000280   8111               LDD     R17, Z+1
   \   00000282   2F01               MOV     R16, R17
   \   00000284   9300....           STS     (RxBuf + 5), R16
    261          							RxBuf[6] = (char)DATA_Registers[RxAddr];
   \   00000288   9100....           LDS     R16, RxAddr
   \   0000028C   9110....           LDS     R17, (RxAddr + 1)
   \   00000290   0F00               LSL     R16
   \   00000292   1F11               ROL     R17
   \   00000294   01F8               MOVW    R31:R30, R17:R16
   \   00000296   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000298   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000029A   8100               LD      R16, Z
   \   0000029C   9300....           STS     (RxBuf + 6), R16
    262          
    263          							CRC.Word = CRC16(RxBuf,7);
   \   000002A0   E027               LDI     R18, 7
   \   000002A2   E030               LDI     R19, 0
   \   000002A4   ....               LDI     R16, LOW(RxBuf)
   \   000002A6   ....               LDI     R17, (RxBuf) >> 8
   \   000002A8   ....               RCALL   CRC16
   \   000002AA   9300....           STS     CRC, R16
   \   000002AE   9310....           STS     (CRC + 1), R17
    264          
    265          							for(c=0;c<7;c++)	TX0_char(RxBuf[c]);
   \   000002B2   E080               LDI     R24, 0
   \   000002B4   C007               RJMP    ??USART0_RX_ISR_16
   \                     ??USART0_RX_ISR_17:
   \   000002B6   E090               LDI     R25, 0
   \   000002B8   01FC               MOVW    R31:R30, R25:R24
   \   000002BA   ....               SUBI    R30, LOW((-(RxBuf) & 0xFFFF))
   \   000002BC   ....               SBCI    R31, (-(RxBuf) & 0xFFFF) >> 8
   \   000002BE   8100               LD      R16, Z
   \   000002C0   ....               RCALL   TX0_char
   \   000002C2   9583               INC     R24
   \                     ??USART0_RX_ISR_16:
   \   000002C4   3087               CPI     R24, 7
   \   000002C6   F3B8               BRCS    ??USART0_RX_ISR_17
    266          							
    267          							TX0_char(CRC.Byte.b1);
   \   000002C8   9100....           LDS     R16, (CRC + 1)
   \   000002CC   ....               RCALL   TX0_char
    268          							TX0_char(CRC.Byte.b0);
   \   000002CE   9100....           LDS     R16, CRC
   \   000002D2   ....               RCALL   TX0_char
   \   000002D4   C02A               RJMP    ??USART0_RX_ISR_11
    269          
    270          						}
    271          						else if(RxType == RESPONSE)
   \                     ??USART0_RX_ISR_15:
   \   000002D6   9100....           LDS     R16, RxType
   \   000002DA   9110....           LDS     R17, (RxType + 1)
   \   000002DE   3003               CPI     R16, 3
   \   000002E0   E020               LDI     R18, 0
   \   000002E2   0712               CPC     R17, R18
   \   000002E4   F481               BRNE    ??USART0_RX_ISR_18
    272          						{
    273          							SCI_Registers[RxAddr] = RxData;
   \   000002E6   9120....           LDS     R18, RxData
   \   000002EA   9130....           LDS     R19, (RxData + 1)
   \   000002EE   9100....           LDS     R16, RxAddr
   \   000002F2   9110....           LDS     R17, (RxAddr + 1)
   \   000002F6   0F00               LSL     R16
   \   000002F8   1F11               ROL     R17
   \   000002FA   01F8               MOVW    R31:R30, R17:R16
   \   000002FC   ....               SUBI    R30, LOW((-(SCI_Registers) & 0xFFFF))
   \   000002FE   ....               SBCI    R31, (-(SCI_Registers) & 0xFFFF) >> 8
   \   00000300   8320               ST      Z, R18
   \   00000302   8331               STD     Z+1, R19
   \   00000304   C012               RJMP    ??USART0_RX_ISR_11
    274          						}
    275          						else if(RxType == QUERY)
   \                     ??USART0_RX_ISR_18:
   \   00000306   9100....           LDS     R16, RxType
   \   0000030A   9110....           LDS     R17, (RxType + 1)
   \   0000030E   3001               CPI     R16, 1
   \   00000310   E020               LDI     R18, 0
   \   00000312   0712               CPC     R17, R18
   \   00000314   F451               BRNE    ??USART0_RX_ISR_11
    276          						{
    277          							Communication_Fault_Cnt = 15;
   \   00000316   E00F               LDI     R16, 15
   \   00000318   E010               LDI     R17, 0
   \   0000031A   9300....           STS     Communication_Fault_Cnt, R16
   \   0000031E   9310....           STS     (Communication_Fault_Cnt + 1), R17
    278          							device_type = RxData;
   \   00000322   9100....           LDS     R16, RxData
   \   00000326   9300....           STS     device_type, R16
    279          						}
    280          						
    281          					}
    282          					
    283          					SciC_RxStep=0;
   \                     ??USART0_RX_ISR_11:
   \   0000032A   E000               LDI     R16, 0
   \   0000032C   9300....           STS     SciC_RxStep, R16
    284          		      	}
    285          		}
    286          	}
    287          
    288          	return ;
   \                     ??USART0_RX_ISR_0:
   \   00000330   BE4C               OUT     0x3C, R4
   \   00000332   BFBB               OUT     0x3B, R27
   \   00000334   BFAF               OUT     0x3F, R26
   \   00000336   9109               LD      R16, Y+
   \   00000338   9119               LD      R17, Y+
   \   0000033A   9129               LD      R18, Y+
   \   0000033C   9139               LD      R19, Y+
   \   0000033E   9149               LD      R20, Y+
   \   00000340   9159               LD      R21, Y+
   \   00000342   9169               LD      R22, Y+
   \   00000344   9179               LD      R23, Y+
   \   00000346   9009               LD      R0, Y+
   \   00000348   9019               LD      R1, Y+
   \   0000034A   9029               LD      R2, Y+
   \   0000034C   9039               LD      R3, Y+
   \   0000034E   91E9               LD      R30, Y+
   \   00000350   91F9               LD      R31, Y+
   \   00000352   9189               LD      R24, Y+
   \   00000354   9199               LD      R25, Y+
   \   00000356   91A9               LD      R26, Y+
   \   00000358   91B9               LD      R27, Y+
   \   0000035A   9049               LD      R4, Y+
   \   0000035C   9518               RETI
   \   0000035E                      REQUIRE _A_UDR0
    289          }
    290          
    291          
    292          

   \                                 In  segment FARCODE, align 2, keep-with-next
    293          void TX0_char( char data)		/* transmit a character by USART0 */
   \                     TX0_char:
    294          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    295          	while((UCSR0A & 0x20) == 0x00);		// data register empty ?
   \                     ??TX0_char_0:
   \   00000000   9110....           LDS     R17, _A_UCSR0A
   \   00000004   2F21               MOV     R18, R17
   \   00000006   FF25               SBRS    R18, 5
   \   00000008   CFFB               RJMP    ??TX0_char_0
    296          	UDR0 = data;
   \   0000000A   9300....           STS     _A_UDR0, R16
    297          }
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_UDR0
   \   00000010                      REQUIRE _A_UCSR0A
    298          /*
    299          //===============================================================================================
    300          void CRC_16(unsigned char input)
    301          {
    302          	unsigned char 	i ;
    303          	unsigned int 	tmp_CRC ;
    304          
    305          	tmp_CRC=((CRC.Word >> 8) ^ input) << 8 ;
    306          	for (i = 0 ; i < 8 ; i++)
    307          	{
    308          		if (tmp_CRC & 0x8000) tmp_CRC = (tmp_CRC << 1) ^ GEN_POLYNOMAL ;
    309          		else tmp_CRC <<= 1 ;
    310          	}
    311          	CRC.Word = (CRC.Word << 8) ^ tmp_CRC ;
    312          }
    313          */
    314          
    315          
    316          //WORD SCI_Registers[Buf_MAX];

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    317          WORD SCI_TxOffset=0;
   \                     SCI_TxOffset:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    318          WORD TxDelyCnt=0;
   \                     TxDelyCnt:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    319           unsigned char TxBuf[9];
   \                     TxBuf:
   \   00000000                      DS8 9

   \                                 In  segment FARCODE, align 2, keep-with-next
    320          void SCI_Process(void)
   \                     SCI_Process:
    321          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    322          unsigned char 	c ;
    323          
    324          //Rx================================
    325          
    326          
    327          	 
    328          //Tx================================
    329          	if(!TxDelyCnt)
   \   00000004   9100....           LDS     R16, TxDelyCnt
   \   00000008   9110....           LDS     R17, (TxDelyCnt + 1)
   \   0000000C   2B01               OR      R16, R17
   \   0000000E   F009               BREQ    $+2+2
   \   00000010   C0DA               RJMP    ??SCI_Process_0
    330          	{
    331          		if(DATA_Registers[SCI_TxOffset] != SCI_Registers[SCI_TxOffset])
   \   00000012   9100....           LDS     R16, SCI_TxOffset
   \   00000016   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   0000001A   0F00               LSL     R16
   \   0000001C   1F11               ROL     R17
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   00000024   8120               LD      R18, Z
   \   00000026   8131               LDD     R19, Z+1
   \   00000028   9100....           LDS     R16, SCI_TxOffset
   \   0000002C   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   00000030   0F00               LSL     R16
   \   00000032   1F11               ROL     R17
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   ....               SUBI    R30, LOW((-(SCI_Registers) & 0xFFFF))
   \   00000038   ....               SBCI    R31, (-(SCI_Registers) & 0xFFFF) >> 8
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   1720               CP      R18, R16
   \   00000040   0731               CPC     R19, R17
   \   00000042   F409               BRNE    $+2+2
   \   00000044   C051               RJMP    ??SCI_Process_1
    332          		{
    333          
    334          			CRC.Word = 0;
   \   00000046   E000               LDI     R16, 0
   \   00000048   E010               LDI     R17, 0
   \   0000004A   9300....           STS     CRC, R16
   \   0000004E   9310....           STS     (CRC + 1), R17
    335          			TxBuf[0] = 0xAB;
   \   00000052   EA0B               LDI     R16, 171
   \   00000054   9300....           STS     TxBuf, R16
    336          			TxBuf[1] = 0xCD;
   \   00000058   EC0D               LDI     R16, 205
   \   0000005A   9300....           STS     (TxBuf + 1), R16
    337          			TxBuf[2] = SEND;
   \   0000005E   E002               LDI     R16, 2
   \   00000060   9300....           STS     (TxBuf + 2), R16
    338          			TxBuf[3] = ((char)(SCI_TxOffset>>8));	
   \   00000064   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   00000068   2F01               MOV     R16, R17
   \   0000006A   9300....           STS     (TxBuf + 3), R16
    339          			TxBuf[4]=  ((char)SCI_TxOffset);
   \   0000006E   9100....           LDS     R16, SCI_TxOffset
   \   00000072   9300....           STS     (TxBuf + 4), R16
    340          			TxBuf[5] = (char)(DATA_Registers[SCI_TxOffset]>>8);
   \   00000076   9100....           LDS     R16, SCI_TxOffset
   \   0000007A   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   0000007E   0F00               LSL     R16
   \   00000080   1F11               ROL     R17
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000086   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   00000088   8111               LDD     R17, Z+1
   \   0000008A   2F01               MOV     R16, R17
   \   0000008C   9300....           STS     (TxBuf + 5), R16
    341          			TxBuf[6] = (char)DATA_Registers[SCI_TxOffset];
   \   00000090   9100....           LDS     R16, SCI_TxOffset
   \   00000094   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   00000098   0F00               LSL     R16
   \   0000009A   1F11               ROL     R17
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   000000A2   8100               LD      R16, Z
   \   000000A4   9300....           STS     (TxBuf + 6), R16
    342          
    343          			CRC.Word = CRC16(TxBuf,7);
   \   000000A8   E027               LDI     R18, 7
   \   000000AA   E030               LDI     R19, 0
   \   000000AC   ....               LDI     R16, LOW(TxBuf)
   \   000000AE   ....               LDI     R17, (TxBuf) >> 8
   \   000000B0   ....               RCALL   CRC16
   \   000000B2   9300....           STS     CRC, R16
   \   000000B6   9310....           STS     (CRC + 1), R17
    344          
    345          			for(c=0;c<7;c++)	TX0_char(TxBuf[c]);
   \   000000BA   E080               LDI     R24, 0
   \   000000BC   C007               RJMP    ??SCI_Process_2
   \                     ??SCI_Process_3:
   \   000000BE   E090               LDI     R25, 0
   \   000000C0   01FC               MOVW    R31:R30, R25:R24
   \   000000C2   ....               SUBI    R30, LOW((-(TxBuf) & 0xFFFF))
   \   000000C4   ....               SBCI    R31, (-(TxBuf) & 0xFFFF) >> 8
   \   000000C6   8100               LD      R16, Z
   \   000000C8   ....               RCALL   TX0_char
   \   000000CA   9583               INC     R24
   \                     ??SCI_Process_2:
   \   000000CC   3087               CPI     R24, 7
   \   000000CE   F3B8               BRCS    ??SCI_Process_3
    346          			
    347          			TX0_char(CRC.Byte.b1);
   \   000000D0   9100....           LDS     R16, (CRC + 1)
   \   000000D4   ....               RCALL   TX0_char
    348          			TX0_char(CRC.Byte.b0);
   \   000000D6   9100....           LDS     R16, CRC
   \   000000DA   ....               RCALL   TX0_char
    349          
    350          			
    351          			TxDelyCnt = 10;
   \   000000DC   E00A               LDI     R16, 10
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   9300....           STS     TxDelyCnt, R16
   \   000000E4   9310....           STS     (TxDelyCnt + 1), R17
    352          		}
    353          
    354          		SCI_TxOffset ++;
   \                     ??SCI_Process_1:
   \   000000E8   ....               LDI     R30, LOW(SCI_TxOffset)
   \   000000EA   ....               LDI     R31, (SCI_TxOffset) >> 8
   \   000000EC   8100               LD      R16, Z
   \   000000EE   8111               LDD     R17, Z+1
   \   000000F0   5F0F               SUBI    R16, 255
   \   000000F2   4F1F               SBCI    R17, 255
   \   000000F4   8300               ST      Z, R16
   \   000000F6   8311               STD     Z+1, R17
    355          		if(BUF_MAX <= SCI_TxOffset) 
   \   000000F8   9100....           LDS     R16, SCI_TxOffset
   \   000000FC   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   00000100   3408               CPI     R16, 72
   \   00000102   E02D               LDI     R18, 13
   \   00000104   0712               CPC     R17, R18
   \   00000106   F030               BRCS    ??SCI_Process_4
    356          		{
    357          			SCI_TxOffset = 0;
   \   00000108   E000               LDI     R16, 0
   \   0000010A   E010               LDI     R17, 0
   \   0000010C   9300....           STS     SCI_TxOffset, R16
   \   00000110   9310....           STS     (SCI_TxOffset + 1), R17
    358          		}
    359          
    360          		if(TimeTic_1s)
   \                     ??SCI_Process_4:
   \   00000114   9100....           LDS     R16, TimeTic_1s
   \   00000118   2300               TST     R16
   \   0000011A   F409               BRNE    $+2+2
   \   0000011C   C04A               RJMP    ??SCI_Process_5
    361          		{
    362          			CRC.Word = 0;
   \   0000011E   E000               LDI     R16, 0
   \   00000120   E010               LDI     R17, 0
   \   00000122   9300....           STS     CRC, R16
   \   00000126   9310....           STS     (CRC + 1), R17
    363          			
    364          			TxBuf[0] = 0xAB;
   \   0000012A   EA0B               LDI     R16, 171
   \   0000012C   9300....           STS     TxBuf, R16
    365          			TxBuf[1] = 0xCD;
   \   00000130   EC0D               LDI     R16, 205
   \   00000132   9300....           STS     (TxBuf + 1), R16
    366          			TxBuf[2] = QUERY;
   \   00000136   E001               LDI     R16, 1
   \   00000138   9300....           STS     (TxBuf + 2), R16
    367          			TxBuf[3] = 0;	
   \   0000013C   E000               LDI     R16, 0
   \   0000013E   9300....           STS     (TxBuf + 3), R16
    368          			TxBuf[4]=  0;
   \   00000142   E000               LDI     R16, 0
   \   00000144   9300....           STS     (TxBuf + 4), R16
    369          			TxBuf[5] = 0;
   \   00000148   E000               LDI     R16, 0
   \   0000014A   9300....           STS     (TxBuf + 5), R16
    370          			TxBuf[6] = 0;
   \   0000014E   E000               LDI     R16, 0
   \   00000150   9300....           STS     (TxBuf + 6), R16
    371          
    372          			CRC.Word = CRC16(TxBuf,7);
   \   00000154   E027               LDI     R18, 7
   \   00000156   E030               LDI     R19, 0
   \   00000158   ....               LDI     R16, LOW(TxBuf)
   \   0000015A   ....               LDI     R17, (TxBuf) >> 8
   \   0000015C   ....               RCALL   CRC16
   \   0000015E   9300....           STS     CRC, R16
   \   00000162   9310....           STS     (CRC + 1), R17
    373          
    374          			for(c=0;c<7;c++)	TX0_char(TxBuf[c]);
   \   00000166   E080               LDI     R24, 0
   \   00000168   C007               RJMP    ??SCI_Process_6
   \                     ??SCI_Process_7:
   \   0000016A   E090               LDI     R25, 0
   \   0000016C   01FC               MOVW    R31:R30, R25:R24
   \   0000016E   ....               SUBI    R30, LOW((-(TxBuf) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(TxBuf) & 0xFFFF) >> 8
   \   00000172   8100               LD      R16, Z
   \   00000174   ....               RCALL   TX0_char
   \   00000176   9583               INC     R24
   \                     ??SCI_Process_6:
   \   00000178   3087               CPI     R24, 7
   \   0000017A   F3B8               BRCS    ??SCI_Process_7
    375          			
    376          			TX0_char(CRC.Byte.b1);
   \   0000017C   9100....           LDS     R16, (CRC + 1)
   \   00000180   ....               RCALL   TX0_char
    377          			TX0_char(CRC.Byte.b0);
   \   00000182   9100....           LDS     R16, CRC
   \   00000186   ....               RCALL   TX0_char
    378          
    379          			
    380          
    381          			if(!Communication_Fault_Cnt)Communication_Fault_Flag=1;
   \   00000188   9100....           LDS     R16, Communication_Fault_Cnt
   \   0000018C   9110....           LDS     R17, (Communication_Fault_Cnt + 1)
   \   00000190   2B01               OR      R16, R17
   \   00000192   F421               BRNE    ??SCI_Process_8
   \   00000194   E001               LDI     R16, 1
   \   00000196   9300....           STS     Communication_Fault_Flag, R16
   \   0000019A   C00B               RJMP    ??SCI_Process_5
    382          			else 
    383          			{
    384          				Communication_Fault_Cnt--;
   \                     ??SCI_Process_8:
   \   0000019C   ....               LDI     R30, LOW(Communication_Fault_Cnt)
   \   0000019E   ....               LDI     R31, (Communication_Fault_Cnt) >> 8
   \   000001A0   8100               LD      R16, Z
   \   000001A2   8111               LDD     R17, Z+1
   \   000001A4   5001               SUBI    R16, 1
   \   000001A6   4010               SBCI    R17, 0
   \   000001A8   8300               ST      Z, R16
   \   000001AA   8311               STD     Z+1, R17
    385          				Communication_Fault_Flag=0;
   \   000001AC   E000               LDI     R16, 0
   \   000001AE   9300....           STS     Communication_Fault_Flag, R16
    386          			}
    387          		}
    388          
    389          		if(TimeTic_500ms)
   \                     ??SCI_Process_5:
   \   000001B2   9100....           LDS     R16, TimeTic_500ms
   \   000001B6   2300               TST     R16
   \   000001B8   F071               BREQ    ??SCI_Process_9
    390          		{
    391          			SCI_RequestData(gRequestAddr);
   \   000001BA   9100....           LDS     R16, gRequestAddr
   \   000001BE   9110....           LDS     R17, (gRequestAddr + 1)
   \   000001C2   ....               RCALL   SCI_RequestData
   \   000001C4   C008               RJMP    ??SCI_Process_9
    392          		}
    393          	}
    394          	else
    395          	{
    396          		TxDelyCnt--;
   \                     ??SCI_Process_0:
   \   000001C6   ....               LDI     R30, LOW(TxDelyCnt)
   \   000001C8   ....               LDI     R31, (TxDelyCnt) >> 8
   \   000001CA   8100               LD      R16, Z
   \   000001CC   8111               LDD     R17, Z+1
   \   000001CE   5001               SUBI    R16, 1
   \   000001D0   4010               SBCI    R17, 0
   \   000001D2   8300               ST      Z, R16
   \   000001D4   8311               STD     Z+1, R17
    397          	}
    398          }
   \                     ??SCI_Process_9:
   \   000001D6   9189               LD      R24, Y+
   \   000001D8   9199               LD      R25, Y+
   \   000001DA   9508               RET
    399          
    400          

   \                                 In  segment FARCODE, align 2, keep-with-next
    401          void SCI_RequestData(unsigned int addr)
   \                     SCI_RequestData:
    402          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    403          unsigned char 	c ;
    404          
    405          				CRC.Word = 0;
   \   00000004   E020               LDI     R18, 0
   \   00000006   E030               LDI     R19, 0
   \   00000008   9320....           STS     CRC, R18
   \   0000000C   9330....           STS     (CRC + 1), R19
    406          			
    407          			TxBuf[0] = 0xAB;
   \   00000010   EA2B               LDI     R18, 171
   \   00000012   9320....           STS     TxBuf, R18
    408          			TxBuf[1] = 0xCD;
   \   00000016   EC2D               LDI     R18, 205
   \   00000018   9320....           STS     (TxBuf + 1), R18
    409          			TxBuf[2] = REQUEST;
   \   0000001C   E024               LDI     R18, 4
   \   0000001E   9320....           STS     (TxBuf + 2), R18
    410          			TxBuf[3] = (char)(addr>>8);	
   \   00000022   0198               MOVW    R19:R18, R17:R16
   \   00000024   2F23               MOV     R18, R19
   \   00000026   9320....           STS     (TxBuf + 3), R18
    411          			TxBuf[4]=  (char)addr;
   \   0000002A   9300....           STS     (TxBuf + 4), R16
    412          
    413          			TxBuf[5] = 0;
   \   0000002E   E000               LDI     R16, 0
   \   00000030   9300....           STS     (TxBuf + 5), R16
    414          			TxBuf[6] = 0;
   \   00000034   E000               LDI     R16, 0
   \   00000036   9300....           STS     (TxBuf + 6), R16
    415          
    416          			CRC.Word = CRC16(TxBuf,7);
   \   0000003A   E027               LDI     R18, 7
   \   0000003C   E030               LDI     R19, 0
   \   0000003E   ....               LDI     R16, LOW(TxBuf)
   \   00000040   ....               LDI     R17, (TxBuf) >> 8
   \   00000042   ....               RCALL   CRC16
   \   00000044   9300....           STS     CRC, R16
   \   00000048   9310....           STS     (CRC + 1), R17
    417          
    418          			for(c=0;c<7;c++)	TX0_char(TxBuf[c]);
   \   0000004C   E080               LDI     R24, 0
   \   0000004E   C007               RJMP    ??SCI_RequestData_0
   \                     ??SCI_RequestData_1:
   \   00000050   E090               LDI     R25, 0
   \   00000052   01FC               MOVW    R31:R30, R25:R24
   \   00000054   ....               SUBI    R30, LOW((-(TxBuf) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(TxBuf) & 0xFFFF) >> 8
   \   00000058   8100               LD      R16, Z
   \   0000005A   ....               RCALL   TX0_char
   \   0000005C   9583               INC     R24
   \                     ??SCI_RequestData_0:
   \   0000005E   3087               CPI     R24, 7
   \   00000060   F3B8               BRCS    ??SCI_RequestData_1
    419          			
    420          			TX0_char(CRC.Byte.b1);
   \   00000062   9100....           LDS     R16, (CRC + 1)
   \   00000066   ....               RCALL   TX0_char
    421          			TX0_char(CRC.Byte.b0);
   \   00000068   9100....           LDS     R16, CRC
   \   0000006C   ....               RCALL   TX0_char
    422          
    423          }
   \   0000006E   9189               LD      R24, Y+
   \   00000070   9199               LD      R25, Y+
   \   00000072   9508               RET
    424          

   \                                 In  segment FARCODE, align 2, keep-with-next
    425          void SCI_SendData(unsigned int addr, unsigned int data)
   \                     SCI_SendData:
    426          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    427          
    428          unsigned char 	c ;
    429          
    430          			CRC.Word = 0;
   \   00000008   E000               LDI     R16, 0
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   9300....           STS     CRC, R16
   \   00000010   9310....           STS     (CRC + 1), R17
    431          			
    432          			TxBuf[0] = 0xAB;
   \   00000014   EA0B               LDI     R16, 171
   \   00000016   9300....           STS     TxBuf, R16
    433          			TxBuf[1] = 0xCD;
   \   0000001A   EC0D               LDI     R16, 205
   \   0000001C   9300....           STS     (TxBuf + 1), R16
    434          			TxBuf[2] = SEND;
   \   00000020   E002               LDI     R16, 2
   \   00000022   9300....           STS     (TxBuf + 2), R16
    435          			TxBuf[3] = (char)(addr>>8);	
   \   00000026   018D               MOVW    R17:R16, R27:R26
   \   00000028   2F01               MOV     R16, R17
   \   0000002A   9300....           STS     (TxBuf + 3), R16
    436          			TxBuf[4]=  (char)addr;
   \   0000002E   2F0A               MOV     R16, R26
   \   00000030   9300....           STS     (TxBuf + 4), R16
    437          			TxBuf[5] = (char)(data>>8);
   \   00000034   0182               MOVW    R17:R16, R5:R4
   \   00000036   2F01               MOV     R16, R17
   \   00000038   9300....           STS     (TxBuf + 5), R16
    438          			TxBuf[6] = (char)data;
   \   0000003C   2D04               MOV     R16, R4
   \   0000003E   9300....           STS     (TxBuf + 6), R16
    439          
    440          			CRC.Word = CRC16(TxBuf,7);
   \   00000042   E027               LDI     R18, 7
   \   00000044   E030               LDI     R19, 0
   \   00000046   ....               LDI     R16, LOW(TxBuf)
   \   00000048   ....               LDI     R17, (TxBuf) >> 8
   \   0000004A   ....               RCALL   CRC16
   \   0000004C   9300....           STS     CRC, R16
   \   00000050   9310....           STS     (CRC + 1), R17
    441          
    442          			for(c=0;c<7;c++)	TX0_char(TxBuf[c]);
   \   00000054   E080               LDI     R24, 0
   \   00000056   C007               RJMP    ??SCI_SendData_0
   \                     ??SCI_SendData_1:
   \   00000058   E090               LDI     R25, 0
   \   0000005A   01FC               MOVW    R31:R30, R25:R24
   \   0000005C   ....               SUBI    R30, LOW((-(TxBuf) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(TxBuf) & 0xFFFF) >> 8
   \   00000060   8100               LD      R16, Z
   \   00000062   ....               RCALL   TX0_char
   \   00000064   9583               INC     R24
   \                     ??SCI_SendData_0:
   \   00000066   3087               CPI     R24, 7
   \   00000068   F3B8               BRCS    ??SCI_SendData_1
    443          			
    444          			TX0_char(CRC.Byte.b1);
   \   0000006A   9100....           LDS     R16, (CRC + 1)
   \   0000006E   ....               RCALL   TX0_char
    445          			TX0_char(CRC.Byte.b0);
   \   00000070   9100....           LDS     R16, CRC
   \   00000074   ....               RCALL   TX0_char
    446          
    447          
    448          	DATA_Registers[addr] = data;
   \   00000076   0FAA               LSL     R26
   \   00000078   1FBB               ROL     R27
   \   0000007A   01FD               MOVW    R31:R30, R27:R26
   \   0000007C   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   00000080   8240               ST      Z, R4
   \   00000082   8251               STD     Z+1, R5
    449          
    450          
    451          }
   \   00000084   E0E6               LDI     R30, 6
   \   00000086   ........           JMP     ?EPILOGUE_B6_L09
    452          

   \                                 In  segment FARCODE, align 2, keep-with-next
    453          void SCI_RegisterRefresh(void)
   \                     SCI_RegisterRefresh:
    454          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    455          	int i;
    456          	unsigned char 	c ;
    457          	for(i=0;i<BUF_MAX;i++)
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
   \   00000008   C015               RJMP    ??SCI_RegisterRefresh_0
    458          	{
    459          		DATA_Registers[i]=0;
   \                     ??SCI_RegisterRefresh_1:
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   019C               MOVW    R19:R18, R25:R24
   \   00000010   0F22               LSL     R18
   \   00000012   1F33               ROL     R19
   \   00000014   01F9               MOVW    R31:R30, R19:R18
   \   00000016   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000001A   8300               ST      Z, R16
   \   0000001C   8311               STD     Z+1, R17
    460          		SCI_Registers[i]=0;
   \   0000001E   E000               LDI     R16, 0
   \   00000020   E010               LDI     R17, 0
   \   00000022   019C               MOVW    R19:R18, R25:R24
   \   00000024   0F22               LSL     R18
   \   00000026   1F33               ROL     R19
   \   00000028   01F9               MOVW    R31:R30, R19:R18
   \   0000002A   ....               SUBI    R30, LOW((-(SCI_Registers) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(SCI_Registers) & 0xFFFF) >> 8
   \   0000002E   8300               ST      Z, R16
   \   00000030   8311               STD     Z+1, R17
    461          	}
   \   00000032   9601               ADIW    R25:R24, 1
   \                     ??SCI_RegisterRefresh_0:
   \   00000034   3488               CPI     R24, 72
   \   00000036   E00D               LDI     R16, 13
   \   00000038   0790               CPC     R25, R16
   \   0000003A   F33C               BRLT    ??SCI_RegisterRefresh_1
    462          
    463          		CRC.Word = 0;
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   E010               LDI     R17, 0
   \   00000040   9300....           STS     CRC, R16
   \   00000044   9310....           STS     (CRC + 1), R17
    464          			
    465          			TxBuf[0] = 0xAB;
   \   00000048   EA0B               LDI     R16, 171
   \   0000004A   9300....           STS     TxBuf, R16
    466          			TxBuf[1] = 0xCD;
   \   0000004E   EC0D               LDI     R16, 205
   \   00000050   9300....           STS     (TxBuf + 1), R16
    467          			TxBuf[2] = SEND;
   \   00000054   E002               LDI     R16, 2
   \   00000056   9300....           STS     (TxBuf + 2), R16
    468          			TxBuf[3] = 0x0C;	
   \   0000005A   E00C               LDI     R16, 12
   \   0000005C   9300....           STS     (TxBuf + 3), R16
    469          			TxBuf[4]=  0x7B;
   \   00000060   E70B               LDI     R16, 123
   \   00000062   9300....           STS     (TxBuf + 4), R16
    470          			TxBuf[5] = 0;
   \   00000066   E000               LDI     R16, 0
   \   00000068   9300....           STS     (TxBuf + 5), R16
    471          			TxBuf[6] = 1;
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   9300....           STS     (TxBuf + 6), R16
    472          
    473          			CRC.Word = CRC16(TxBuf,7);
   \   00000072   E027               LDI     R18, 7
   \   00000074   E030               LDI     R19, 0
   \   00000076   ....               LDI     R16, LOW(TxBuf)
   \   00000078   ....               LDI     R17, (TxBuf) >> 8
   \   0000007A   ....               RCALL   CRC16
   \   0000007C   9300....           STS     CRC, R16
   \   00000080   9310....           STS     (CRC + 1), R17
    474          
    475          			for(c=0;c<7;c++)	TX0_char(TxBuf[c]);
   \   00000084   E080               LDI     R24, 0
   \   00000086   C007               RJMP    ??SCI_RegisterRefresh_2
   \                     ??SCI_RegisterRefresh_3:
   \   00000088   E090               LDI     R25, 0
   \   0000008A   01FC               MOVW    R31:R30, R25:R24
   \   0000008C   ....               SUBI    R30, LOW((-(TxBuf) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, (-(TxBuf) & 0xFFFF) >> 8
   \   00000090   8100               LD      R16, Z
   \   00000092   ....               RCALL   TX0_char
   \   00000094   9583               INC     R24
   \                     ??SCI_RegisterRefresh_2:
   \   00000096   3087               CPI     R24, 7
   \   00000098   F3B8               BRCS    ??SCI_RegisterRefresh_3
    476          			
    477          			TX0_char(CRC.Byte.b1);
   \   0000009A   9100....           LDS     R16, (CRC + 1)
   \   0000009E   ....               RCALL   TX0_char
    478          			TX0_char(CRC.Byte.b0);
   \   000000A0   9100....           LDS     R16, CRC
   \   000000A4   ....               RCALL   TX0_char
    479          
    480          	DATA_Registers[0x0C7B]=1;
   \   000000A6   E001               LDI     R16, 1
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   9300....           STS     (DATA_Registers + 6390), R16
   \   000000AE   9310....           STS     (DATA_Registers + 6391), R17
    481          	SCI_Registers[0x0C7B]=0;
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   9300....           STS     (SCI_Registers + 6390), R16
   \   000000BA   9310....           STS     (SCI_Registers + 6391), R17
    482          
    483          }
   \   000000BE   9189               LD      R24, Y+
   \   000000C0   9199               LD      R25, Y+
   \   000000C2   9508               RET
    484          
    485          
    486          #pragma vector = USART0_TX_vect

   \                                 In  segment FARCODE, align 2, keep-with-next
    487          __interrupt void USART0_TX_ISR(void)
   \                     USART0_TX_ISR:
    488          //ISR(USART0_TX_vect)             // USART2 Tx Complete interrupt
    489          {
   \   00000000   933A               ST      -Y, R19
   \   00000002   932A               ST      -Y, R18
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
   \   0000000A   B72B               IN      R18, 0x3B
   \   0000000C   B73C               IN      R19, 0x3C
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
    490          	UCSR0B = UCSR0B | 0x10;
   \   0000000E   910000C1           LDS     R16, 193
   \   00000012   6100               ORI     R16, 0x10
   \   00000014   930000C1           STS     193, R16
    491          }
   \   00000018   BF3C               OUT     0x3C, R19
   \   0000001A   BF2B               OUT     0x3B, R18
   \   0000001C   BF1F               OUT     0x3F, R17
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   9139               LD      R19, Y+
   \   00000026   9518               RETI
   \   00000028                      REQUIRE _A_UCSR0B

   \                                 In  segment INTVEC, offset 0x64, root
   \                     `??USART0_RX_ISR??INTVEC 100`:
   \   00000064   ........           JMP     USART0_RX_ISR

   \                                 In  segment INTVEC, offset 0x6c, root
   \                     `??USART0_TX_ISR??INTVEC 108`:
   \   0000006C   ........           JMP     USART0_TX_ISR

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Communication_Fault_Cnt>`:
   \   00000000   0003               DC16 3

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for aucCRCHi>`:
   \   00000000   C1004081C001       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   00000010   C0014180C100       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000020   C0014180C100       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000030   C1004081C001       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   00000040   C0014180C100       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000050   C1004081C001       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   00000060   C1004081C001       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   00000070   C0014180C100       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000080   C0014180C100       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   00000090   C1004081C001       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   000000A0   C1004081C001       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   000000B0   C0014180C100       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   000000C0   C1004081C001       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    
   \   000000D0   C0014180C100       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   000000E0   C0014180C100       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              4081C1004081
   \              C0014180    
   \   000000F0   C1004081C001       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              4180C0014180
   \              C1004081    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for aucCRCLo>`:
   \   00000000   C00001C103C3       DC8 0, 192, 193, 1, 195, 3, 2, 194, 198, 6, 7, 199, 5, 197, 196, 4, 204
   \              C20206C6C707
   \              C50504C4CC  
   \   00000011   0D0C0FCDCECF       DC8 12, 13, 205, 15, 207, 206, 14, 10, 202, 203, 11, 201, 9, 8, 200
   \              0A0ECBCAC90B
   \              0809C8      
   \   00000020   18D8D919DB1B       DC8 216, 24, 25, 217, 27, 219, 218, 26, 30, 222, 223, 31, 221, 29, 28
   \              1ADADE1E1FDF
   \              1DDD1C      
   \   0000002F   14DCD5D4D715       DC8 220, 20, 212, 213, 21, 215, 23, 22, 214, 210, 18, 19, 211, 17, 209
   \              1617D2D61312
   \              11D3D1      
   \   0000003E   10D030F0F131       DC8 208, 16, 240, 48, 49, 241, 51, 243, 242, 50, 54, 246, 247, 55, 245
   \              F33332F2F636
   \              37F7F5      
   \   0000004D   34353CF4FDFC       DC8 53, 52, 244, 60, 252, 253, 61, 255, 63, 62, 254, 250, 58, 59, 251
   \              FF3D3E3FFAFE
   \              3B3AFB      
   \   0000005C   F93938F8E828       DC8 57, 249, 248, 56, 40, 232, 233, 41, 235, 43, 42, 234, 238, 46, 47
   \              29E92BEBEA2A
   \              2EEE2F      
   \   0000006B   2DEFECEDE42C       DC8 239, 45, 237, 236, 44, 228, 36, 37, 229, 39, 231, 230, 38, 34, 226
   \              252427E5E6E7
   \              2226E2      
   \   0000007A   23E321E1E020       DC8 227, 35, 225, 33, 32, 224, 160, 96, 97, 161, 99, 163, 162, 98, 102
   \              60A0A161A363
   \              62A266      
   \   00000089   A7A6A5676465       DC8 166, 167, 103, 165, 101, 100, 164, 108, 172, 173, 109, 175, 111
   \              6CA4ADACAF6D
   \              6F          
   \   00000096   AE6E6AAAAB6B       DC8 110, 174, 170, 106, 107, 171, 105, 169, 168, 104, 120, 184, 185
   \              A96968A8B878
   \              B9          
   \   000000A3   BB797A7BBEBA       DC8 121, 187, 123, 122, 186, 190, 126, 127, 191, 125, 189, 188, 124
   \              7F7E7DBFBCBD
   \              7C          
   \   000000B0   74B4B575B777       DC8 180, 116, 117, 181, 119, 183, 182, 118, 114, 178, 179, 115, 177
   \              76B6B27273B3
   \              B1          
   \   000000BD   707150B09190       DC8 113, 112, 176, 80, 144, 145, 81, 147, 83, 82, 146, 150, 86, 87, 151
   \              935152539692
   \              575697      
   \   000000CC   955554945C9C       DC8 85, 149, 148, 84, 156, 92, 93, 157, 95, 159, 158, 94, 90, 154, 155
   \              9D5D9F5F5E9E
   \              9A5A9B      
   \   000000DB   995B58598898       DC8 91, 153, 89, 88, 152, 136, 72, 73, 137, 75, 139, 138, 74, 78, 142
   \              49484B898A8B
   \              4E4A8E      
   \   000000EA   4F8F4D8D8C4C       DC8 143, 79, 141, 77, 76, 140, 68, 132, 133, 69, 135, 71, 70, 134, 130
   \              844445854787
   \              864682      
   \   000000F9   434241838081       DC8 66, 67, 131, 65, 129, 128, 64
   \              40          
    492          
    493          
    494          
    495          
    496          

   Maximum stack usage in bytes:

     Function             CSTACK RSTACK
     --------             ------ ------
     CRC16                    0      3
     ReadDataMem              0      3
     SCI_Process              2      3
       -> CRC16               2      3
       -> TX0_char            2      3
       -> TX0_char            2      3
       -> TX0_char            2      3
       -> CRC16               2      3
       -> TX0_char            2      3
       -> TX0_char            2      3
       -> TX0_char            2      3
       -> SCI_RequestData     2      3
     SCI_RegisterRefresh      2      3
       -> CRC16               2      3
       -> TX0_char            2      3
       -> TX0_char            2      3
       -> TX0_char            2      3
     SCI_RequestData          2      3
       -> CRC16               2      3
       -> TX0_char            2      3
       -> TX0_char            2      3
       -> TX0_char            2      3
     SCI_SendData             6      3
       -> CRC16               6      3
       -> TX0_char            6      3
       -> TX0_char            6      3
       -> TX0_char            6      3
     TX0_char                 0      3
     UART_init                0      3
     USART0_RX_ISR           19      3
       -> CRC16              19      3
       -> CRC16              19      3
       -> TX0_char           19      3
       -> TX0_char           19      3
       -> TX0_char           19      3
       -> CRC16              19      3
       -> TX0_char           19      3
       -> TX0_char           19      3
       -> TX0_char           19      3
     USART0_TX_ISR            4      3
     WriteDataMem             0      3


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     _A_UDR0                                       1
     _A_UBRR0                                      2
     _A_UCSR0C                                     1
     _A_UCSR0B                                     1
     _A_UCSR0A                                     1
     CRC                                           2
     data_flg                                      2
     Communication_Fault_Cnt                       2
     Communication_Fault_Flag                      1
     SCI_Registers                              6800
     packet                                        8
     aucCRCHi                                    256
     aucCRCLo                                    256
     CRC16                                        76
     UART_init                                    44
     WriteDataMem                                 16
     ReadDataMem                                  24
     SciC_RxStep                                   1
     SciC_RxFlag                                   1
     RxType                                        2
     RxAddr                                        2
     RxData                                        2
     RxCRC                                         2
     RxBuf                                         9
     RXD0                                          1
     USART0_RX_ISR                               862
     TX0_char                                     16
     SCI_TxOffset                                  2
     TxDelyCnt                                     2
     TxBuf                                         9
     SCI_Process                                 476
     SCI_RequestData                             116
     SCI_SendData                                138
     SCI_RegisterRefresh                         196
     USART0_TX_ISR                                40
     ??USART0_RX_ISR??INTVEC 100                   4
     ??USART0_TX_ISR??INTVEC 108                   4
     ?<Initializer for Communication_Fault_Cnt>    2
     ?<Initializer for aucCRCHi>                 256
     ?<Initializer for aucCRCLo>                 256
      Others                                      14

 
     6 bytes in segment ABSOLUTE
 2 004 bytes in segment FARCODE
    14 bytes in segment INITTAB
     8 bytes in segment INTVEC
   514 bytes in segment NEAR_I
   514 bytes in segment NEAR_ID
 6 846 bytes in segment NEAR_Z
 
 2 518 bytes of CODE memory (+ 22 bytes shared)
 7 360 bytes of DATA memory (+  6 bytes shared)

Errors: none
Warnings: none

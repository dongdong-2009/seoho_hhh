###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR    28/Jan/2011  01:53:22 #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\idonno2000\바탕                #
#                    화면\KEYPAD335_110127_IAR\source\mcu\rs232_MMItoPANEL.c  #
#    Command line =  "C:\Documents and Settings\idonno2000\바탕               #
#                    화면\KEYPAD335_110127_IAR\source\mcu\rs232_MMItoPANEL.c" #
#                     --cpu=m2560 -ms -o "C:\Documents and                    #
#                    Settings\idonno2000\바탕 화면\KEYPAD335_110127_IAR\Debug #
#                    \Obj\" -lC "C:\Documents and Settings\idonno2000\바탕    #
#                    화면\KEYPAD335_110127_IAR\Debug\List\" -lA               #
#                    "C:\Documents and Settings\idonno2000\바탕               #
#                    화면\KEYPAD335_110127_IAR\Debug\List\" -y                #
#                    --initializers_in_flash -z3 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug --enable_external_bus                  #
#                    -DENABLE_BIT_DEFINITIONS -e --enable_multibytes -I       #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.3\avr\INC\" -I "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 5.3\avr\INC\CLIB\" --eeprom_size 4096          #
#    List file    =  C:\Documents and Settings\idonno2000\바탕                #
#                    화면\KEYPAD335_110127_IAR\Debug\List\rs232_MMItoPANEL.ls #
#                    t                                                        #
#    Object file  =  C:\Documents and Settings\idonno2000\바탕                #
#                    화면\KEYPAD335_110127_IAR\Debug\Obj\rs232_MMItoPANEL.r90 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\idonno2000\바탕 화면\KEYPAD335_110127_IAR\source\mcu\rs232_MMItoPANEL.c
      1          //==============================================================================================
      2          //
      3          // Copyright(C) 2008 HanYoung ELEC. Co., LTD.
      4          // Designed by Paul B.H Park(idonno2000)
      5          //
      6          //
      7          //	filename : serial.c
      8          //	description : 시리얼통신 함수 정의
      9          //
     10          //	history : 2008-05-09 4:03오후
     11          //            2008-06-26 - 링퍼버 수신모듈 구성
     12          //                       - 송신부분은 테스트중
     13          //                       - 관련문서 ( ringbuffer.doc )
     14          //                                  ( 링버퍼 패킷송수신.vsd) 
     15          //           2008-08-20 - printf함수 포함
     16          //                              - 링버퍼 수신모듈 리턴인자 수정 (0or1)
     17          //           1010-03-03 - MINV MMI to CTRL_PANEL간 통신 전용
     18          //                              - 기존의 링버퍼를 활용하여 자기자신의 데이터가 변할蒻?//===============================================================================================
     19          
     20          //#include <avr/io.h>
     21          //#include <avr/interrupt.h>
     22          //#include <util/delay.h>
     23          
     24          #include <inavr.h>
     25          #include <iom2560.h>

   \                                 In  segment ABSOLUTE, at 0xc6
   \   <__C115> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   <__C119> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   <__C123> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   <__C126> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   <__C129> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1
     26          
     27          #include <string.h>
     28          #include "type.h"
     29          #include "util.h"
     30          #include "rs232_MMItoPANEL.h"
     31          
     32          #include "display.h"
     33          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     34          CRC_flg	CRC ;
   \                     CRC:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     35          Data_flg	data_flg;
   \                     data_flg:
   \   00000000                      DS8 2
     36          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     37          unsigned int Communication_Fault_Cnt = 3;
   \                     Communication_Fault_Cnt:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for Communication_Fault_Cnt>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     38          unsigned char Communication_Fault_Flag = 0;
   \                     Communication_Fault_Flag:
   \   00000000                      DS8 1
     39          
     40          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     41          unsigned int SCI_Registers[BUF_MAX];
   \                     SCI_Registers:
   \   00000000                      DS8 6800
     42          //==============================================================
     43          // UART  initialize

   \                                 In  segment FARCODE, align 2, keep-with-next
     44          void UART_init(void)
   \                     UART_init:
     45          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     46          	UBRR0H = 0; 								// 19200 baud for 16MHz OSC
   \   00000000   E000               LDI     R16, 0
   \   00000002   930000C5           STS     197, R16
     47          	UBRR0L = 51;
   \   00000006   E303               LDI     R16, 51
   \   00000008   9300....           STS     _A_UBRR0, R16
     48          	UCSR0A = 0x00;								// asynchronous normal mode
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     _A_UCSR0A, R16
     49          	UCSR0B = 0xD8;								// Rx/Tx enbale, Rx Complete interrupt enable
   \   00000012   ED08               LDI     R16, 216
   \   00000014   9300....           STS     _A_UCSR0B, R16
     50          	UCSR0C = 0x06;								// 8 data, 1 stop, no parity
   \   00000018   E006               LDI     R16, 6
   \   0000001A   9300....           STS     _A_UCSR0C, R16
     51          
     52          #if 0
     53          	//timer 3 인터럽트
     54          	TCCR3A = 0x10;
     55          	TCCR3B = 0x0C;
     56          	TCCR3C = 0x00;
     57          	OCR3A = 62;//1ms
     58          	TCNT3 = 0x0000;
     59          
     60          	TIMSK3 = 0x02;
     61          	TIFR3 = 0x2F;
     62          #endif
     63          
     64          
     65          	CRC.Word = 0 ;
   \   0000001E   E000               LDI     R16, 0
   \   00000020   E010               LDI     R17, 0
   \   00000022   9300....           STS     CRC, R16
   \   00000026   9310....           STS     (CRC + 1), R17
     66          
     67          }
   \   0000002A   9508               RET
   \   0000002C                      REQUIRE _A_UBRR0
   \   0000002C                      REQUIRE _A_UCSR0C
   \   0000002C                      REQUIRE _A_UCSR0B
   \   0000002C                      REQUIRE _A_UCSR0A
     68          
     69          

   \                                 In  segment FARCODE, align 2, keep-with-next
     70          void WriteDataMem(unsigned int addr, unsigned int dat)
   \                     WriteDataMem:
     71          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     72          	//*(volatile int *)(DATA_REG + (addr<<1)+0) = (char)(dat>>8);
     73          	//*(volatile int *)(DATA_REG + (addr<<1)+1) = (char)dat;
     74          	DATA_Registers[addr] = dat;
   \   00000000   0F00               LSL     R16
   \   00000002   1F11               ROL     R17
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000008   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000000A   8320               ST      Z, R18
   \   0000000C   8331               STD     Z+1, R19
     75          }
   \   0000000E   9508               RET

   \                                 In  segment FARCODE, align 2, keep-with-next
     76          unsigned int ReadDataMem(unsigned int addr)
   \                     ReadDataMem:
     77          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     78          	unsigned int data_word = 0;
   \   00000000   E020               LDI     R18, 0
   \   00000002   E030               LDI     R19, 0
     79          	//data_word =  MAKEWORD( (*(volatile int *)(DATA_REG + (addr<<1)+0 )),(*(volatile int *)(DATA_REG + (addr<<1)+1)) );
     80          	data_word = DATA_Registers[addr];
   \   00000004   0F00               LSL     R16
   \   00000006   1F11               ROL     R17
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000000E   8100               LD      R16, Z
   \   00000010   8111               LDD     R17, Z+1
   \   00000012   0198               MOVW    R19:R18, R17:R16
     81           	return data_word;
   \   00000014   0189               MOVW    R17:R16, R19:R18
   \   00000016   9508               RET
     82          }
     83          //-----------------------------
     84          // 데이타 수신
     85          //-----------------------------

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     86           unsigned char SciC_RxStep=0;
   \                     SciC_RxStep:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     87           unsigned char SciC_RxFlag=0;
   \                     SciC_RxFlag:
   \   00000000                      DS8 1
     88          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     89           unsigned int RxType=0;
   \                     RxType:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     90           unsigned int RxAddr=0;
   \                     RxAddr:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     91           unsigned int RxData=0;
   \                     RxData:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     92           unsigned int RxCRC=0;
   \                     RxCRC:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     93           unsigned char RxBuf[9];
   \                     RxBuf:
   \   00000000                      DS8 9

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     94           unsigned char RXD0;
   \                     RXD0:
   \   00000000                      DS8 1
     95          
     96          #pragma vector = USART0_RX_vect

   \                                 In  segment FARCODE, align 2, keep-with-next
     97          __interrupt void USART0_RX_ISR(void)
   \                     USART0_RX_ISR:
     98          //ISR(USART0_RX_vect)	
     99          {
   \   00000000   93AA               ST      -Y, R26
   \   00000002   939A               ST      -Y, R25
   \   00000004   938A               ST      -Y, R24
   \   00000006   93FA               ST      -Y, R31
   \   00000008   93EA               ST      -Y, R30
   \   0000000A   923A               ST      -Y, R3
   \   0000000C   922A               ST      -Y, R2
   \   0000000E   921A               ST      -Y, R1
   \   00000010   920A               ST      -Y, R0
   \   00000012   937A               ST      -Y, R23
   \   00000014   936A               ST      -Y, R22
   \   00000016   935A               ST      -Y, R21
   \   00000018   934A               ST      -Y, R20
   \   0000001A   933A               ST      -Y, R19
   \   0000001C   932A               ST      -Y, R18
   \   0000001E   931A               ST      -Y, R17
   \   00000020   930A               ST      -Y, R16
   \   00000022   B78F               IN      R24, 0x3F
   \   00000024   B79B               IN      R25, 0x3B
   \   00000026   B7AC               IN      R26, 0x3C
   \   00000028                      REQUIRE __RSTACK_in_external_ram_new_way
    100          	RXD0 = UDR0 ;
   \   00000028   9100....           LDS     R16, _A_UDR0
   \   0000002C   9300....           STS     RXD0, R16
    101          	if(!SciC_RxFlag)
   \   00000030   9100....           LDS     R16, SciC_RxFlag
   \   00000034   2300               TST     R16
   \   00000036   F009               BREQ    $+2+2
   \   00000038   C1A7               RJMP    ??USART0_RX_ISR_0
    102          	{
    103          		if(SciC_RxStep == 0)//sync1
   \   0000003A   9100....           LDS     R16, SciC_RxStep
   \   0000003E   2300               TST     R16
   \   00000040   F489               BRNE    ??USART0_RX_ISR_1
    104          		{
    105          			if(RXD0 == 0xAB)
   \   00000042   9100....           LDS     R16, RXD0
   \   00000046   3A0B               CPI     R16, 171
   \   00000048   F449               BRNE    ??USART0_RX_ISR_2
    106          			{
    107          				
    108          				RxBuf[0] = 0xAB;
   \   0000004A   EA0B               LDI     R16, 171
   \   0000004C   9300....           STS     RxBuf, R16
    109          				SciC_RxStep++;
   \   00000050   9100....           LDS     R16, SciC_RxStep
   \   00000054   9503               INC     R16
   \   00000056   9300....           STS     SciC_RxStep, R16
   \   0000005A   C199               RJMP    ??USART0_RX_ISR_3
    110          			}
    111          			else SciC_RxStep=0;
   \                     ??USART0_RX_ISR_2:
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   9300....           STS     SciC_RxStep, R16
   \   00000062   C195               RJMP    ??USART0_RX_ISR_3
    112          		}
    113          		else if(SciC_RxStep == 1)//sync2
   \                     ??USART0_RX_ISR_1:
   \   00000064   9100....           LDS     R16, SciC_RxStep
   \   00000068   3001               CPI     R16, 1
   \   0000006A   F489               BRNE    ??USART0_RX_ISR_4
    114          		{
    115          			if(RXD0 == 0xCD)
   \   0000006C   9100....           LDS     R16, RXD0
   \   00000070   3C0D               CPI     R16, 205
   \   00000072   F449               BRNE    ??USART0_RX_ISR_5
    116          			{
    117          				RxBuf[1] = 0xCD;
   \   00000074   EC0D               LDI     R16, 205
   \   00000076   9300....           STS     (RxBuf + 1), R16
    118          				SciC_RxStep++;
   \   0000007A   9100....           LDS     R16, SciC_RxStep
   \   0000007E   9503               INC     R16
   \   00000080   9300....           STS     SciC_RxStep, R16
   \   00000084   C184               RJMP    ??USART0_RX_ISR_3
    119          			}
    120          			else SciC_RxStep=0;
   \                     ??USART0_RX_ISR_5:
   \   00000086   E000               LDI     R16, 0
   \   00000088   9300....           STS     SciC_RxStep, R16
   \   0000008C   C180               RJMP    ??USART0_RX_ISR_3
    121          		}
    122          		else if(SciC_RxStep == 2)//type
   \                     ??USART0_RX_ISR_4:
   \   0000008E   9100....           LDS     R16, SciC_RxStep
   \   00000092   3002               CPI     R16, 2
   \   00000094   F451               BRNE    ??USART0_RX_ISR_6
    123          		{
    124          			RxBuf[2] = RXD0;
   \   00000096   9100....           LDS     R16, RXD0
   \   0000009A   9300....           STS     (RxBuf + 2), R16
    125          			SciC_RxStep++;
   \   0000009E   9100....           LDS     R16, SciC_RxStep
   \   000000A2   9503               INC     R16
   \   000000A4   9300....           STS     SciC_RxStep, R16
   \   000000A8   C172               RJMP    ??USART0_RX_ISR_3
    126          		}
    127          		else if(SciC_RxStep == 3)//addr_h
   \                     ??USART0_RX_ISR_6:
   \   000000AA   9100....           LDS     R16, SciC_RxStep
   \   000000AE   3003               CPI     R16, 3
   \   000000B0   F451               BRNE    ??USART0_RX_ISR_7
    128          		{
    129          			RxBuf[3] = RXD0;
   \   000000B2   9100....           LDS     R16, RXD0
   \   000000B6   9300....           STS     (RxBuf + 3), R16
    130          			SciC_RxStep++;
   \   000000BA   9100....           LDS     R16, SciC_RxStep
   \   000000BE   9503               INC     R16
   \   000000C0   9300....           STS     SciC_RxStep, R16
   \   000000C4   C164               RJMP    ??USART0_RX_ISR_3
    131          		}
    132          		else if(SciC_RxStep == 4)//addr_l
   \                     ??USART0_RX_ISR_7:
   \   000000C6   9100....           LDS     R16, SciC_RxStep
   \   000000CA   3004               CPI     R16, 4
   \   000000CC   F451               BRNE    ??USART0_RX_ISR_8
    133          		{
    134          			RxBuf[4] = RXD0;
   \   000000CE   9100....           LDS     R16, RXD0
   \   000000D2   9300....           STS     (RxBuf + 4), R16
    135          			SciC_RxStep++;
   \   000000D6   9100....           LDS     R16, SciC_RxStep
   \   000000DA   9503               INC     R16
   \   000000DC   9300....           STS     SciC_RxStep, R16
   \   000000E0   C156               RJMP    ??USART0_RX_ISR_3
    136          		}
    137          		else if(SciC_RxStep == 5)//data_h
   \                     ??USART0_RX_ISR_8:
   \   000000E2   9100....           LDS     R16, SciC_RxStep
   \   000000E6   3005               CPI     R16, 5
   \   000000E8   F451               BRNE    ??USART0_RX_ISR_9
    138          		{
    139          			RxBuf[5] = RXD0;
   \   000000EA   9100....           LDS     R16, RXD0
   \   000000EE   9300....           STS     (RxBuf + 5), R16
    140          			SciC_RxStep++;
   \   000000F2   9100....           LDS     R16, SciC_RxStep
   \   000000F6   9503               INC     R16
   \   000000F8   9300....           STS     SciC_RxStep, R16
   \   000000FC   C148               RJMP    ??USART0_RX_ISR_3
    141          		}
    142          		else if(SciC_RxStep == 6)//data_l
   \                     ??USART0_RX_ISR_9:
   \   000000FE   9100....           LDS     R16, SciC_RxStep
   \   00000102   3006               CPI     R16, 6
   \   00000104   F451               BRNE    ??USART0_RX_ISR_10
    143          		{
    144          			RxBuf[6] = RXD0;
   \   00000106   9100....           LDS     R16, RXD0
   \   0000010A   9300....           STS     (RxBuf + 6), R16
    145          			SciC_RxStep++;
   \   0000010E   9100....           LDS     R16, SciC_RxStep
   \   00000112   9503               INC     R16
   \   00000114   9300....           STS     SciC_RxStep, R16
   \   00000118   C13A               RJMP    ??USART0_RX_ISR_3
    146          		}
    147          		else if(SciC_RxStep == 7)//crc_H
   \                     ??USART0_RX_ISR_10:
   \   0000011A   9100....           LDS     R16, SciC_RxStep
   \   0000011E   3007               CPI     R16, 7
   \   00000120   F451               BRNE    ??USART0_RX_ISR_11
    148          		{
    149          			RxBuf[7] = RXD0;
   \   00000122   9100....           LDS     R16, RXD0
   \   00000126   9300....           STS     (RxBuf + 7), R16
    150          			SciC_RxStep++;
   \   0000012A   9100....           LDS     R16, SciC_RxStep
   \   0000012E   9503               INC     R16
   \   00000130   9300....           STS     SciC_RxStep, R16
   \   00000134   C12C               RJMP    ??USART0_RX_ISR_3
    151          		}
    152          		else//crc_L
    153          		{
    154          			RxBuf[8] = RXD0;
   \                     ??USART0_RX_ISR_11:
   \   00000136   9100....           LDS     R16, RXD0
   \   0000013A   9300....           STS     (RxBuf + 8), R16
    155          
    156          			CRC.Word = 0;
   \   0000013E   E000               LDI     R16, 0
   \   00000140   E010               LDI     R17, 0
   \   00000142   9300....           STS     CRC, R16
   \   00000146   9310....           STS     (CRC + 1), R17
    157          			CRC_16(RxBuf[0]);
   \   0000014A   9100....           LDS     R16, RxBuf
   \   0000014E   ....               RCALL   CRC_16
    158          			CRC_16(RxBuf[1]);
   \   00000150   9100....           LDS     R16, (RxBuf + 1)
   \   00000154   ....               RCALL   CRC_16
    159          			CRC_16(RxBuf[2]);
   \   00000156   9100....           LDS     R16, (RxBuf + 2)
   \   0000015A   ....               RCALL   CRC_16
    160          			CRC_16(RxBuf[3]);
   \   0000015C   9100....           LDS     R16, (RxBuf + 3)
   \   00000160   ....               RCALL   CRC_16
    161          			CRC_16(RxBuf[4]);
   \   00000162   9100....           LDS     R16, (RxBuf + 4)
   \   00000166   ....               RCALL   CRC_16
    162          			CRC_16(RxBuf[5]);
   \   00000168   9100....           LDS     R16, (RxBuf + 5)
   \   0000016C   ....               RCALL   CRC_16
    163          			CRC_16(RxBuf[6]);
   \   0000016E   9100....           LDS     R16, (RxBuf + 6)
   \   00000172   ....               RCALL   CRC_16
    164          
    165          			RxType = RxBuf[2];
   \   00000174   9100....           LDS     R16, (RxBuf + 2)
   \   00000178   E010               LDI     R17, 0
   \   0000017A   9300....           STS     RxType, R16
   \   0000017E   9310....           STS     (RxType + 1), R17
    166          			RxAddr = ((unsigned int)RxBuf[3]<<8) | RxBuf[4] ;
   \   00000182   9130....           LDS     R19, (RxBuf + 3)
   \   00000186   E020               LDI     R18, 0
   \   00000188   9100....           LDS     R16, (RxBuf + 4)
   \   0000018C   E010               LDI     R17, 0
   \   0000018E   2B20               OR      R18, R16
   \   00000190   2B31               OR      R19, R17
   \   00000192   9320....           STS     RxAddr, R18
   \   00000196   9330....           STS     (RxAddr + 1), R19
    167          			RxData = ((unsigned int)RxBuf[5]<<8) | RxBuf[6] ;
   \   0000019A   9130....           LDS     R19, (RxBuf + 5)
   \   0000019E   E020               LDI     R18, 0
   \   000001A0   9100....           LDS     R16, (RxBuf + 6)
   \   000001A4   E010               LDI     R17, 0
   \   000001A6   2B20               OR      R18, R16
   \   000001A8   2B31               OR      R19, R17
   \   000001AA   9320....           STS     RxData, R18
   \   000001AE   9330....           STS     (RxData + 1), R19
    168          			RxCRC   = ((unsigned int)RxBuf[7]<<8) | RxBuf[8] ;
   \   000001B2   9130....           LDS     R19, (RxBuf + 7)
   \   000001B6   E020               LDI     R18, 0
   \   000001B8   9100....           LDS     R16, (RxBuf + 8)
   \   000001BC   E010               LDI     R17, 0
   \   000001BE   2B20               OR      R18, R16
   \   000001C0   2B31               OR      R19, R17
   \   000001C2   9320....           STS     RxCRC, R18
   \   000001C6   9330....           STS     (RxCRC + 1), R19
    169          
    170          			if((RxBuf[7] == CRC.Byte.b1) && (RxBuf[8] == CRC.Byte.b0))
   \   000001CA   9100....           LDS     R16, (RxBuf + 7)
   \   000001CE   9110....           LDS     R17, (CRC + 1)
   \   000001D2   1701               CP      R16, R17
   \   000001D4   F009               BREQ    $+2+2
   \   000001D6   C0D4               RJMP    ??USART0_RX_ISR_12
   \   000001D8   9100....           LDS     R16, (RxBuf + 8)
   \   000001DC   9110....           LDS     R17, CRC
   \   000001E0   1701               CP      R16, R17
   \   000001E2   F009               BREQ    $+2+2
   \   000001E4   C0CD               RJMP    ??USART0_RX_ISR_12
    171          			{
    172          				SciC_RxFlag=1;
   \   000001E6   E001               LDI     R16, 1
   \   000001E8   9300....           STS     SciC_RxFlag, R16
    173          				SCI_Registers[RxAddr] = RxData;
   \   000001EC   9120....           LDS     R18, RxData
   \   000001F0   9130....           LDS     R19, (RxData + 1)
   \   000001F4   9100....           LDS     R16, RxAddr
   \   000001F8   9110....           LDS     R17, (RxAddr + 1)
   \   000001FC   0F00               LSL     R16
   \   000001FE   1F11               ROL     R17
   \   00000200   01F8               MOVW    R31:R30, R17:R16
   \   00000202   ....               SUBI    R30, LOW((-(SCI_Registers) & 0xFFFF))
   \   00000204   ....               SBCI    R31, (-(SCI_Registers) & 0xFFFF) >> 8
   \   00000206   8320               ST      Z, R18
   \   00000208   8331               STD     Z+1, R19
    174          
    175          				if(RxType == SEND)
   \   0000020A   9100....           LDS     R16, RxType
   \   0000020E   9110....           LDS     R17, (RxType + 1)
   \   00000212   3002               CPI     R16, 2
   \   00000214   E020               LDI     R18, 0
   \   00000216   0712               CPC     R17, R18
   \   00000218   F009               BREQ    $+2+2
   \   0000021A   C044               RJMP    ??USART0_RX_ISR_13
    176          				{
    177          					CRC.Word = 0;
   \   0000021C   E000               LDI     R16, 0
   \   0000021E   E010               LDI     R17, 0
   \   00000220   9300....           STS     CRC, R16
   \   00000224   9310....           STS     (CRC + 1), R17
    178          					TX0_char(RxBuf[0]);		CRC_16(RxBuf[0]);
   \   00000228   9100....           LDS     R16, RxBuf
   \   0000022C   ....               RCALL   TX0_char
   \   0000022E   9100....           LDS     R16, RxBuf
   \   00000232   ....               RCALL   CRC_16
    179          					TX0_char(RxBuf[1]);		CRC_16(RxBuf[1]);
   \   00000234   9100....           LDS     R16, (RxBuf + 1)
   \   00000238   ....               RCALL   TX0_char
   \   0000023A   9100....           LDS     R16, (RxBuf + 1)
   \   0000023E   ....               RCALL   CRC_16
    180          					TX0_char(RESPONSE);		CRC_16(RESPONSE);
   \   00000240   E003               LDI     R16, 3
   \   00000242   ....               RCALL   TX0_char
   \   00000244   E003               LDI     R16, 3
   \   00000246   ....               RCALL   CRC_16
    181          					TX0_char(RxBuf[3]);		CRC_16(RxBuf[3]);
   \   00000248   9100....           LDS     R16, (RxBuf + 3)
   \   0000024C   ....               RCALL   TX0_char
   \   0000024E   9100....           LDS     R16, (RxBuf + 3)
   \   00000252   ....               RCALL   CRC_16
    182          					TX0_char(RxBuf[4]);		CRC_16(RxBuf[4]);
   \   00000254   9100....           LDS     R16, (RxBuf + 4)
   \   00000258   ....               RCALL   TX0_char
   \   0000025A   9100....           LDS     R16, (RxBuf + 4)
   \   0000025E   ....               RCALL   CRC_16
    183          					TX0_char(RxBuf[5]);		CRC_16(RxBuf[5]);
   \   00000260   9100....           LDS     R16, (RxBuf + 5)
   \   00000264   ....               RCALL   TX0_char
   \   00000266   9100....           LDS     R16, (RxBuf + 5)
   \   0000026A   ....               RCALL   CRC_16
    184          					TX0_char(RxBuf[6]);		CRC_16(RxBuf[6]);
   \   0000026C   9100....           LDS     R16, (RxBuf + 6)
   \   00000270   ....               RCALL   TX0_char
   \   00000272   9100....           LDS     R16, (RxBuf + 6)
   \   00000276   ....               RCALL   CRC_16
    185          					TX0_char(CRC.Byte.b1);
   \   00000278   9100....           LDS     R16, (CRC + 1)
   \   0000027C   ....               RCALL   TX0_char
    186          					TX0_char(CRC.Byte.b0);
   \   0000027E   9100....           LDS     R16, CRC
   \   00000282   ....               RCALL   TX0_char
    187          
    188          					DATA_Registers[RxAddr] = RxData;
   \   00000284   9120....           LDS     R18, RxData
   \   00000288   9130....           LDS     R19, (RxData + 1)
   \   0000028C   9100....           LDS     R16, RxAddr
   \   00000290   9110....           LDS     R17, (RxAddr + 1)
   \   00000294   0F00               LSL     R16
   \   00000296   1F11               ROL     R17
   \   00000298   01F8               MOVW    R31:R30, R17:R16
   \   0000029A   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   0000029C   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000029E   8320               ST      Z, R18
   \   000002A0   8331               STD     Z+1, R19
   \   000002A2   C06E               RJMP    ??USART0_RX_ISR_12
    189          				}
    190          				else if(RxType == REQUEST)
   \                     ??USART0_RX_ISR_13:
   \   000002A4   9100....           LDS     R16, RxType
   \   000002A8   9110....           LDS     R17, (RxType + 1)
   \   000002AC   3004               CPI     R16, 4
   \   000002AE   E020               LDI     R18, 0
   \   000002B0   0712               CPC     R17, R18
   \   000002B2   F009               BREQ    $+2+2
   \   000002B4   C057               RJMP    ??USART0_RX_ISR_14
    191          				{
    192          					CRC.Word = 0;
   \   000002B6   E000               LDI     R16, 0
   \   000002B8   E010               LDI     R17, 0
   \   000002BA   9300....           STS     CRC, R16
   \   000002BE   9310....           STS     (CRC + 1), R17
    193          					TX0_char(RxBuf[0]);								CRC_16(RxBuf[0]);
   \   000002C2   9100....           LDS     R16, RxBuf
   \   000002C6   ....               RCALL   TX0_char
   \   000002C8   9100....           LDS     R16, RxBuf
   \   000002CC   ....               RCALL   CRC_16
    194          					TX0_char(RxBuf[1]);								CRC_16(RxBuf[1]);
   \   000002CE   9100....           LDS     R16, (RxBuf + 1)
   \   000002D2   ....               RCALL   TX0_char
   \   000002D4   9100....           LDS     R16, (RxBuf + 1)
   \   000002D8   ....               RCALL   CRC_16
    195          					TX0_char(SEND);									CRC_16(SEND);
   \   000002DA   E002               LDI     R16, 2
   \   000002DC   ....               RCALL   TX0_char
   \   000002DE   E002               LDI     R16, 2
   \   000002E0   ....               RCALL   CRC_16
    196          					TX0_char(RxBuf[3]);								CRC_16(RxBuf[3]);
   \   000002E2   9100....           LDS     R16, (RxBuf + 3)
   \   000002E6   ....               RCALL   TX0_char
   \   000002E8   9100....           LDS     R16, (RxBuf + 3)
   \   000002EC   ....               RCALL   CRC_16
    197          					TX0_char(RxBuf[4]);								CRC_16(RxBuf[4]);
   \   000002EE   9100....           LDS     R16, (RxBuf + 4)
   \   000002F2   ....               RCALL   TX0_char
   \   000002F4   9100....           LDS     R16, (RxBuf + 4)
   \   000002F8   ....               RCALL   CRC_16
    198          					TX0_char((char)(DATA_Registers[RxAddr]>>8));	CRC_16((char)(DATA_Registers[RxAddr]>>8));
   \   000002FA   9100....           LDS     R16, RxAddr
   \   000002FE   9110....           LDS     R17, (RxAddr + 1)
   \   00000302   0F00               LSL     R16
   \   00000304   1F11               ROL     R17
   \   00000306   01F8               MOVW    R31:R30, R17:R16
   \   00000308   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   0000030A   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000030C   8111               LDD     R17, Z+1
   \   0000030E   2F01               MOV     R16, R17
   \   00000310   ....               RCALL   TX0_char
   \   00000312   9100....           LDS     R16, RxAddr
   \   00000316   9110....           LDS     R17, (RxAddr + 1)
   \   0000031A   0F00               LSL     R16
   \   0000031C   1F11               ROL     R17
   \   0000031E   01F8               MOVW    R31:R30, R17:R16
   \   00000320   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000322   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   00000324   8111               LDD     R17, Z+1
   \   00000326   2F01               MOV     R16, R17
   \   00000328   ....               RCALL   CRC_16
    199          					TX0_char((char)DATA_Registers[RxAddr]);		CRC_16((char)DATA_Registers[RxAddr]);
   \   0000032A   9100....           LDS     R16, RxAddr
   \   0000032E   9110....           LDS     R17, (RxAddr + 1)
   \   00000332   0F00               LSL     R16
   \   00000334   1F11               ROL     R17
   \   00000336   01F8               MOVW    R31:R30, R17:R16
   \   00000338   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   0000033A   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000033C   8100               LD      R16, Z
   \   0000033E   ....               RCALL   TX0_char
   \   00000340   9100....           LDS     R16, RxAddr
   \   00000344   9110....           LDS     R17, (RxAddr + 1)
   \   00000348   0F00               LSL     R16
   \   0000034A   1F11               ROL     R17
   \   0000034C   01F8               MOVW    R31:R30, R17:R16
   \   0000034E   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000350   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   00000352   8100               LD      R16, Z
   \   00000354   ....               RCALL   CRC_16
    200          
    201          					TX0_char(CRC.Byte.b1);
   \   00000356   9100....           LDS     R16, (CRC + 1)
   \   0000035A   ....               RCALL   TX0_char
    202          					TX0_char(CRC.Byte.b0);
   \   0000035C   9100....           LDS     R16, CRC
   \   00000360   ....               RCALL   TX0_char
   \   00000362   C00E               RJMP    ??USART0_RX_ISR_12
    203          
    204          				}
    205          				else if(RxType == QUERY)
   \                     ??USART0_RX_ISR_14:
   \   00000364   9100....           LDS     R16, RxType
   \   00000368   9110....           LDS     R17, (RxType + 1)
   \   0000036C   3001               CPI     R16, 1
   \   0000036E   E020               LDI     R18, 0
   \   00000370   0712               CPC     R17, R18
   \   00000372   F431               BRNE    ??USART0_RX_ISR_12
    206          				{
    207          					Communication_Fault_Cnt = 3;
   \   00000374   E003               LDI     R16, 3
   \   00000376   E010               LDI     R17, 0
   \   00000378   9300....           STS     Communication_Fault_Cnt, R16
   \   0000037C   9310....           STS     (Communication_Fault_Cnt + 1), R17
    208          				}
    209          				
    210          			}
    211          			SciC_RxStep=0;
   \                     ??USART0_RX_ISR_12:
   \   00000380   E000               LDI     R16, 0
   \   00000382   9300....           STS     SciC_RxStep, R16
   \   00000386   C003               RJMP    ??USART0_RX_ISR_3
    212          		}
    213          	}
    214          	else SciC_RxStep=0;
   \                     ??USART0_RX_ISR_0:
   \   00000388   E000               LDI     R16, 0
   \   0000038A   9300....           STS     SciC_RxStep, R16
    215          
    216          
    217          	return ;
   \                     ??USART0_RX_ISR_3:
   \   0000038E   BFAC               OUT     0x3C, R26
   \   00000390   BF9B               OUT     0x3B, R25
   \   00000392   BF8F               OUT     0x3F, R24
   \   00000394   9109               LD      R16, Y+
   \   00000396   9119               LD      R17, Y+
   \   00000398   9129               LD      R18, Y+
   \   0000039A   9139               LD      R19, Y+
   \   0000039C   9149               LD      R20, Y+
   \   0000039E   9159               LD      R21, Y+
   \   000003A0   9169               LD      R22, Y+
   \   000003A2   9179               LD      R23, Y+
   \   000003A4   9009               LD      R0, Y+
   \   000003A6   9019               LD      R1, Y+
   \   000003A8   9029               LD      R2, Y+
   \   000003AA   9039               LD      R3, Y+
   \   000003AC   91E9               LD      R30, Y+
   \   000003AE   91F9               LD      R31, Y+
   \   000003B0   9189               LD      R24, Y+
   \   000003B2   9199               LD      R25, Y+
   \   000003B4   91A9               LD      R26, Y+
   \   000003B6   9518               RETI
   \   000003B8                      REQUIRE _A_UDR0
    218          }
    219          
    220          
    221          

   \                                 In  segment FARCODE, align 2, keep-with-next
    222          void TX0_char( char data)		/* transmit a character by USART0 */
   \                     TX0_char:
    223          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    224          	while((UCSR0A & 0x20) == 0x00);		// data register empty ?
   \                     ??TX0_char_0:
   \   00000000   9110....           LDS     R17, _A_UCSR0A
   \   00000004   2F21               MOV     R18, R17
   \   00000006   FF25               SBRS    R18, 5
   \   00000008   CFFB               RJMP    ??TX0_char_0
    225          	UDR0 = data;
   \   0000000A   9300....           STS     _A_UDR0, R16
    226          }
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_UDR0
   \   00000010                      REQUIRE _A_UCSR0A
    227          
    228          //===============================================================================================

   \                                 In  segment FARCODE, align 2, keep-with-next
    229          void CRC_16(unsigned char input)
   \                     CRC_16:
    230          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    231          	unsigned char 	i ;
    232          	unsigned int 	tmp_CRC ;
    233          
    234          	tmp_CRC=((CRC.Word >> 8) ^ input) << 8 ;
   \   00000000   9150....           LDS     R21, (CRC + 1)
   \   00000004   2F45               MOV     R20, R21
   \   00000006   2740               EOR     R20, R16
   \   00000008   2F54               MOV     R21, R20
   \   0000000A   E040               LDI     R20, 0
    235          	for (i = 0 ; i < 8 ; i++)
   \   0000000C   E020               LDI     R18, 0
   \   0000000E   C003               RJMP    ??CRC_16_0
    236          	{
    237          		if (tmp_CRC & 0x8000) tmp_CRC = (tmp_CRC << 1) ^ GEN_POLYNOMAL ;
    238          		else tmp_CRC <<= 1 ;
   \                     ??CRC_16_1:
   \   00000010   0F44               LSL     R20
   \   00000012   1F55               ROL     R21
   \                     ??CRC_16_2:
   \   00000014   9523               INC     R18
   \                     ??CRC_16_0:
   \   00000016   3028               CPI     R18, 8
   \   00000018   F448               BRCC    ??CRC_16_3
   \   0000001A   FB57               BST     R21, 7
   \   0000001C   F7CE               BRTC    ??CRC_16_1
   \   0000001E   0F44               LSL     R20
   \   00000020   1F55               ROL     R21
   \   00000022   E201               LDI     R16, 33
   \   00000024   E818               LDI     R17, 136
   \   00000026   2740               EOR     R20, R16
   \   00000028   2751               EOR     R21, R17
   \   0000002A   CFF4               RJMP    ??CRC_16_2
    239          	}
    240          	CRC.Word = (CRC.Word << 8) ^ tmp_CRC ;
   \                     ??CRC_16_3:
   \   0000002C   9100....           LDS     R16, CRC
   \   00000030   2F10               MOV     R17, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   2704               EOR     R16, R20
   \   00000036   2715               EOR     R17, R21
   \   00000038   9300....           STS     CRC, R16
   \   0000003C   9310....           STS     (CRC + 1), R17
    241          }
   \   00000040   9508               RET
    242          
    243          
    244          
    245          //WORD SCI_Registers[Buf_MAX];

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    246          WORD SCI_TxOffset=0;
   \                     SCI_TxOffset:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    247          WORD TxDelyCnt=0;
   \                     TxDelyCnt:
   \   00000000                      DS8 2

   \                                 In  segment FARCODE, align 2, keep-with-next
    248          void SCI_Process(void)
   \                     SCI_Process:
    249          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    250          //Rx================================
    251          	 if(SciC_RxFlag)
   \   00000000   9100....           LDS     R16, SciC_RxFlag
   \   00000004   2300               TST     R16
   \   00000006   F019               BREQ    ??SCI_Process_0
    252                	{
    253          		SciC_RxFlag = 0;
   \   00000008   E000               LDI     R16, 0
   \   0000000A   9300....           STS     SciC_RxFlag, R16
    254                	}
    255          	 
    256          //Tx================================
    257          	if(!TxDelyCnt)
   \                     ??SCI_Process_0:
   \   0000000E   9100....           LDS     R16, TxDelyCnt
   \   00000012   9110....           LDS     R17, (TxDelyCnt + 1)
   \   00000016   2B01               OR      R16, R17
   \   00000018   F009               BREQ    $+2+2
   \   0000001A   C0CD               RJMP    ??SCI_Process_1
    258          	{
    259          		if(DATA_Registers[SCI_TxOffset] != SCI_Registers[SCI_TxOffset])
   \   0000001C   9100....           LDS     R16, SCI_TxOffset
   \   00000020   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   00000024   0F00               LSL     R16
   \   00000026   1F11               ROL     R17
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   0000002E   8120               LD      R18, Z
   \   00000030   8131               LDD     R19, Z+1
   \   00000032   9100....           LDS     R16, SCI_TxOffset
   \   00000036   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   0000003A   0F00               LSL     R16
   \   0000003C   1F11               ROL     R17
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(SCI_Registers) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(SCI_Registers) & 0xFFFF) >> 8
   \   00000044   8100               LD      R16, Z
   \   00000046   8111               LDD     R17, Z+1
   \   00000048   1720               CP      R18, R16
   \   0000004A   0731               CPC     R19, R17
   \   0000004C   F409               BRNE    $+2+2
   \   0000004E   C05A               RJMP    ??SCI_Process_2
    260          		{
    261          			CRC.Word = 0;
   \   00000050   E000               LDI     R16, 0
   \   00000052   E010               LDI     R17, 0
   \   00000054   9300....           STS     CRC, R16
   \   00000058   9310....           STS     (CRC + 1), R17
    262          
    263          
    264          			TX0_char(0xAB);										CRC_16(0xAB);
   \   0000005C   EA0B               LDI     R16, 171
   \   0000005E   ....               RCALL   TX0_char
   \   00000060   EA0B               LDI     R16, 171
   \   00000062   ....               RCALL   CRC_16
    265          			TX0_char(0xCD);										CRC_16(0xCD);
   \   00000064   EC0D               LDI     R16, 205
   \   00000066   ....               RCALL   TX0_char
   \   00000068   EC0D               LDI     R16, 205
   \   0000006A   ....               RCALL   CRC_16
    266          
    267          			TX0_char(SEND);										CRC_16(SEND);
   \   0000006C   E002               LDI     R16, 2
   \   0000006E   ....               RCALL   TX0_char
   \   00000070   E002               LDI     R16, 2
   \   00000072   ....               RCALL   CRC_16
    268          
    269          			TX0_char((char)(SCI_TxOffset>>8));					CRC_16((char)(SCI_TxOffset>>8));
   \   00000074   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   00000078   2F01               MOV     R16, R17
   \   0000007A   ....               RCALL   TX0_char
   \   0000007C   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   00000080   2F01               MOV     R16, R17
   \   00000082   ....               RCALL   CRC_16
    270          			TX0_char((char)SCI_TxOffset);							CRC_16((char)SCI_TxOffset);
   \   00000084   9100....           LDS     R16, SCI_TxOffset
   \   00000088   ....               RCALL   TX0_char
   \   0000008A   9100....           LDS     R16, SCI_TxOffset
   \   0000008E   ....               RCALL   CRC_16
    271          	                
    272          	            TX0_char((char)(DATA_Registers[SCI_TxOffset]>>8));	CRC_16((char)(DATA_Registers[SCI_TxOffset]>>8));
   \   00000090   9100....           LDS     R16, SCI_TxOffset
   \   00000094   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   00000098   0F00               LSL     R16
   \   0000009A   1F11               ROL     R17
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   000000A2   8111               LDD     R17, Z+1
   \   000000A4   2F01               MOV     R16, R17
   \   000000A6   ....               RCALL   TX0_char
   \   000000A8   9100....           LDS     R16, SCI_TxOffset
   \   000000AC   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   000000B0   0F00               LSL     R16
   \   000000B2   1F11               ROL     R17
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   000000BA   8111               LDD     R17, Z+1
   \   000000BC   2F01               MOV     R16, R17
   \   000000BE   ....               RCALL   CRC_16
    273          			TX0_char((char)DATA_Registers[SCI_TxOffset]);		CRC_16((char)DATA_Registers[SCI_TxOffset]);
   \   000000C0   9100....           LDS     R16, SCI_TxOffset
   \   000000C4   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   000000C8   0F00               LSL     R16
   \   000000CA   1F11               ROL     R17
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   000000D2   8100               LD      R16, Z
   \   000000D4   ....               RCALL   TX0_char
   \   000000D6   9100....           LDS     R16, SCI_TxOffset
   \   000000DA   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   000000DE   0F00               LSL     R16
   \   000000E0   1F11               ROL     R17
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   000000E8   8100               LD      R16, Z
   \   000000EA   ....               RCALL   CRC_16
    274          
    275          			TX0_char(CRC.Byte.b1);
   \   000000EC   9100....           LDS     R16, (CRC + 1)
   \   000000F0   ....               RCALL   TX0_char
    276          			TX0_char(CRC.Byte.b0);
   \   000000F2   9100....           LDS     R16, CRC
   \   000000F6   ....               RCALL   TX0_char
    277          			TxDelyCnt = 10;
   \   000000F8   E00A               LDI     R16, 10
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   9300....           STS     TxDelyCnt, R16
   \   00000100   9310....           STS     (TxDelyCnt + 1), R17
    278          		}
    279          
    280          		SCI_TxOffset ++;
   \                     ??SCI_Process_2:
   \   00000104   ....               LDI     R30, LOW(SCI_TxOffset)
   \   00000106   ....               LDI     R31, (SCI_TxOffset) >> 8
   \   00000108   8100               LD      R16, Z
   \   0000010A   8111               LDD     R17, Z+1
   \   0000010C   5F0F               SUBI    R16, 255
   \   0000010E   4F1F               SBCI    R17, 255
   \   00000110   8300               ST      Z, R16
   \   00000112   8311               STD     Z+1, R17
    281          		if(BUF_MAX <= SCI_TxOffset) 
   \   00000114   9100....           LDS     R16, SCI_TxOffset
   \   00000118   9110....           LDS     R17, (SCI_TxOffset + 1)
   \   0000011C   3408               CPI     R16, 72
   \   0000011E   E02D               LDI     R18, 13
   \   00000120   0712               CPC     R17, R18
   \   00000122   F030               BRCS    ??SCI_Process_3
    282          		{
    283          			SCI_TxOffset = 0;
   \   00000124   E000               LDI     R16, 0
   \   00000126   E010               LDI     R17, 0
   \   00000128   9300....           STS     SCI_TxOffset, R16
   \   0000012C   9310....           STS     (SCI_TxOffset + 1), R17
    284          		}
    285          
    286          		if(TimeTic_1s)
   \                     ??SCI_Process_3:
   \   00000130   9100....           LDS     R16, TimeTic_1s
   \   00000134   2300               TST     R16
   \   00000136   F409               BRNE    $+2+2
   \   00000138   C046               RJMP    ??SCI_Process_4
    287          		{
    288          			CRC.Word = 0;
   \   0000013A   E000               LDI     R16, 0
   \   0000013C   E010               LDI     R17, 0
   \   0000013E   9300....           STS     CRC, R16
   \   00000142   9310....           STS     (CRC + 1), R17
    289          			TX0_char(0xAB);			CRC_16(0xAB);
   \   00000146   EA0B               LDI     R16, 171
   \   00000148   ....               RCALL   TX0_char
   \   0000014A   EA0B               LDI     R16, 171
   \   0000014C   ....               RCALL   CRC_16
    290          			TX0_char(0xCD);			CRC_16(0xCD);
   \   0000014E   EC0D               LDI     R16, 205
   \   00000150   ....               RCALL   TX0_char
   \   00000152   EC0D               LDI     R16, 205
   \   00000154   ....               RCALL   CRC_16
    291          
    292          			TX0_char(QUERY);			CRC_16(QUERY);
   \   00000156   E001               LDI     R16, 1
   \   00000158   ....               RCALL   TX0_char
   \   0000015A   E001               LDI     R16, 1
   \   0000015C   ....               RCALL   CRC_16
    293          
    294          			TX0_char(0);				CRC_16(0);
   \   0000015E   E000               LDI     R16, 0
   \   00000160   ....               RCALL   TX0_char
   \   00000162   E000               LDI     R16, 0
   \   00000164   ....               RCALL   CRC_16
    295          			TX0_char(0);				CRC_16(0);
   \   00000166   E000               LDI     R16, 0
   \   00000168   ....               RCALL   TX0_char
   \   0000016A   E000               LDI     R16, 0
   \   0000016C   ....               RCALL   CRC_16
    296          
    297          			TX0_char(0);				CRC_16(0);
   \   0000016E   E000               LDI     R16, 0
   \   00000170   ....               RCALL   TX0_char
   \   00000172   E000               LDI     R16, 0
   \   00000174   ....               RCALL   CRC_16
    298          			TX0_char(0);				CRC_16(0);
   \   00000176   E000               LDI     R16, 0
   \   00000178   ....               RCALL   TX0_char
   \   0000017A   E000               LDI     R16, 0
   \   0000017C   ....               RCALL   CRC_16
    299          
    300          			TX0_char(CRC.Byte.b1);
   \   0000017E   9100....           LDS     R16, (CRC + 1)
   \   00000182   ....               RCALL   TX0_char
    301          			TX0_char(CRC.Byte.b0);
   \   00000184   9100....           LDS     R16, CRC
   \   00000188   ....               RCALL   TX0_char
    302          
    303          			if(!Communication_Fault_Cnt)Communication_Fault_Flag=1;
   \   0000018A   9100....           LDS     R16, Communication_Fault_Cnt
   \   0000018E   9110....           LDS     R17, (Communication_Fault_Cnt + 1)
   \   00000192   2B01               OR      R16, R17
   \   00000194   F421               BRNE    ??SCI_Process_5
   \   00000196   E001               LDI     R16, 1
   \   00000198   9300....           STS     Communication_Fault_Flag, R16
   \   0000019C   9508               RET
    304          			else 
    305          			{
    306          				Communication_Fault_Cnt--;
   \                     ??SCI_Process_5:
   \   0000019E   ....               LDI     R30, LOW(Communication_Fault_Cnt)
   \   000001A0   ....               LDI     R31, (Communication_Fault_Cnt) >> 8
   \   000001A2   8100               LD      R16, Z
   \   000001A4   8111               LDD     R17, Z+1
   \   000001A6   5001               SUBI    R16, 1
   \   000001A8   4010               SBCI    R17, 0
   \   000001AA   8300               ST      Z, R16
   \   000001AC   8311               STD     Z+1, R17
    307          				Communication_Fault_Flag=0;
   \   000001AE   E000               LDI     R16, 0
   \   000001B0   9300....           STS     Communication_Fault_Flag, R16
   \   000001B4   9508               RET
    308          			}
    309          		}
    310          	}
    311          	else
    312          	{
    313          		TxDelyCnt--;
   \                     ??SCI_Process_1:
   \   000001B6   ....               LDI     R30, LOW(TxDelyCnt)
   \   000001B8   ....               LDI     R31, (TxDelyCnt) >> 8
   \   000001BA   8100               LD      R16, Z
   \   000001BC   8111               LDD     R17, Z+1
   \   000001BE   5001               SUBI    R16, 1
   \   000001C0   4010               SBCI    R17, 0
   \   000001C2   8300               ST      Z, R16
   \   000001C4   8311               STD     Z+1, R17
    314          	}
    315          }
   \                     ??SCI_Process_4:
   \   000001C6   9508               RET
    316          
    317          

   \                                 In  segment FARCODE, align 2, keep-with-next
    318          void SCI_RequestData(unsigned int addr)
   \                     SCI_RequestData:
    319          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    320          	CRC.Word = 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
   \   00000004   9300....           STS     CRC, R16
   \   00000008   9310....           STS     (CRC + 1), R17
    321          	TX0_char(0xAB); 		CRC_16(0xAB);
   \   0000000C   EA0B               LDI     R16, 171
   \   0000000E   ....               RCALL   TX0_char
   \   00000010   EA0B               LDI     R16, 171
   \   00000012   ....               RCALL   CRC_16
    322          	TX0_char(0xCD); 		CRC_16(0xCD);
   \   00000014   EC0D               LDI     R16, 205
   \   00000016   ....               RCALL   TX0_char
   \   00000018   EC0D               LDI     R16, 205
   \   0000001A   ....               RCALL   CRC_16
    323          	
    324          	TX0_char(REQUEST);		CRC_16(REQUEST);
   \   0000001C   E004               LDI     R16, 4
   \   0000001E   ....               RCALL   TX0_char
   \   00000020   E004               LDI     R16, 4
   \   00000022   ....               RCALL   CRC_16
    325          	
    326          	TX0_char(0);				CRC_16(0);
   \   00000024   E000               LDI     R16, 0
   \   00000026   ....               RCALL   TX0_char
   \   00000028   E000               LDI     R16, 0
   \   0000002A   ....               RCALL   CRC_16
    327          	TX0_char(0);				CRC_16(0);
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   ....               RCALL   TX0_char
   \   00000030   E000               LDI     R16, 0
   \   00000032   ....               RCALL   CRC_16
    328          	
    329          	TX0_char(0);				CRC_16(0);
   \   00000034   E000               LDI     R16, 0
   \   00000036   ....               RCALL   TX0_char
   \   00000038   E000               LDI     R16, 0
   \   0000003A   ....               RCALL   CRC_16
    330          	TX0_char(0);				CRC_16(0);
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   ....               RCALL   TX0_char
   \   00000040   E000               LDI     R16, 0
   \   00000042   ....               RCALL   CRC_16
    331          	
    332          	TX0_char(CRC.Byte.b1);
   \   00000044   9100....           LDS     R16, (CRC + 1)
   \   00000048   ....               RCALL   TX0_char
    333          	TX0_char(CRC.Byte.b0);
   \   0000004A   9100....           LDS     R16, CRC
   \   0000004E   ....               RCALL   TX0_char
    334          
    335          }
   \   00000050   9508               RET
    336          

   \                                 In  segment FARCODE, align 2, keep-with-next
    337          void SCI_RegisterRefresh(void)
   \                     SCI_RegisterRefresh:
    338          {
   \   00000000   01AC               MOVW    R21:R20, R25:R24
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    339          	int i;
    340          	for(i=0;i<BUF_MAX;i++)
   \   00000002   E080               LDI     R24, 0
   \   00000004   E090               LDI     R25, 0
   \   00000006   C015               RJMP    ??SCI_RegisterRefresh_0
    341          	{
    342          		DATA_Registers[i]=0;
   \                     ??SCI_RegisterRefresh_1:
   \   00000008   E000               LDI     R16, 0
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   019C               MOVW    R19:R18, R25:R24
   \   0000000E   0F22               LSL     R18
   \   00000010   1F33               ROL     R19
   \   00000012   01F9               MOVW    R31:R30, R19:R18
   \   00000014   ....               SUBI    R30, LOW((-(DATA_Registers) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(DATA_Registers) & 0xFFFF) >> 8
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
    343          		SCI_Registers[i]=0;
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   E010               LDI     R17, 0
   \   00000020   019C               MOVW    R19:R18, R25:R24
   \   00000022   0F22               LSL     R18
   \   00000024   1F33               ROL     R19
   \   00000026   01F9               MOVW    R31:R30, R19:R18
   \   00000028   ....               SUBI    R30, LOW((-(SCI_Registers) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(SCI_Registers) & 0xFFFF) >> 8
   \   0000002C   8300               ST      Z, R16
   \   0000002E   8311               STD     Z+1, R17
    344          	}
   \   00000030   9601               ADIW    R25:R24, 1
   \                     ??SCI_RegisterRefresh_0:
   \   00000032   3488               CPI     R24, 72
   \   00000034   E00D               LDI     R16, 13
   \   00000036   0790               CPC     R25, R16
   \   00000038   F33C               BRLT    ??SCI_RegisterRefresh_1
    345          	DATA_Registers[3195] = 1;
   \   0000003A   E001               LDI     R16, 1
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   9300....           STS     (DATA_Registers + 6390), R16
   \   00000042   9310....           STS     (DATA_Registers + 6391), R17
    346          }
   \   00000046   01CA               MOVW    R25:R24, R21:R20
   \   00000048   9508               RET
    347          
    348          
    349          #pragma vector = USART0_TX_vect

   \                                 In  segment FARCODE, align 2, keep-with-next
    350          __interrupt void USART0_TX_ISR(void)
   \                     USART0_TX_ISR:
    351          //ISR(USART0_TX_vect)             // USART2 Tx Complete interrupt
    352          {
   \   00000000   933A               ST      -Y, R19
   \   00000002   932A               ST      -Y, R18
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
   \   0000000A   B72B               IN      R18, 0x3B
   \   0000000C   B73C               IN      R19, 0x3C
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
    353          	UCSR0B = UCSR0B | 0x10;
   \   0000000E   910000C1           LDS     R16, 193
   \   00000012   6100               ORI     R16, 0x10
   \   00000014   930000C1           STS     193, R16
    354          }
   \   00000018   BF3C               OUT     0x3C, R19
   \   0000001A   BF2B               OUT     0x3B, R18
   \   0000001C   BF1F               OUT     0x3F, R17
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   9139               LD      R19, Y+
   \   00000026   9518               RETI
   \   00000028                      REQUIRE _A_UCSR0B

   \                                 In  segment INTVEC, offset 0x64, root
   \                     `??USART0_RX_ISR??INTVEC 100`:
   \   00000064   ........           JMP     USART0_RX_ISR

   \                                 In  segment INTVEC, offset 0x6c, root
   \                     `??USART0_TX_ISR??INTVEC 108`:
   \   0000006C   ........           JMP     USART0_TX_ISR

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for Communication_Fault_Cnt>`:
   \   00000000   0003               DC16 3
    355          
    356          

   Maximum stack usage in bytes:

     Function            CSTACK RSTACK
     --------            ------ ------
     CRC_16                  0      3
     ReadDataMem             0      3
     SCI_Process             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> TX0_char           0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> TX0_char           0      3
     SCI_RegisterRefresh     0      3
     SCI_RequestData         0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> CRC_16             0      3
       -> TX0_char           0      3
       -> TX0_char           0      3
     TX0_char                0      3
     UART_init               0      3
     USART0_RX_ISR          17      3
       -> CRC_16            17      3
       -> CRC_16            17      3
       -> CRC_16            17      3
       -> CRC_16            17      3
       -> CRC_16            17      3
       -> CRC_16            17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> TX0_char          17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> CRC_16            17      3
       -> TX0_char          17      3
       -> TX0_char          17      3
     USART0_TX_ISR           4      3
     WriteDataMem            0      3


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     _A_UDR0                                       1
     _A_UBRR0                                      2
     _A_UCSR0C                                     1
     _A_UCSR0B                                     1
     _A_UCSR0A                                     1
     CRC                                           2
     data_flg                                      2
     Communication_Fault_Cnt                       2
     Communication_Fault_Flag                      1
     SCI_Registers                              6800
     UART_init                                    44
     WriteDataMem                                 16
     ReadDataMem                                  24
     SciC_RxStep                                   1
     SciC_RxFlag                                   1
     RxType                                        2
     RxAddr                                        2
     RxData                                        2
     RxCRC                                         2
     RxBuf                                         9
     RXD0                                          1
     USART0_RX_ISR                               952
     TX0_char                                     16
     CRC_16                                       66
     SCI_TxOffset                                  2
     TxDelyCnt                                     2
     SCI_Process                                 456
     SCI_RequestData                              82
     SCI_RegisterRefresh                          74
     USART0_TX_ISR                                40
     ??USART0_RX_ISR??INTVEC 100                   4
     ??USART0_TX_ISR??INTVEC 108                   4
     ?<Initializer for Communication_Fault_Cnt>    2
      Others                                      14

 
     6 bytes in segment ABSOLUTE
 1 770 bytes in segment FARCODE
    14 bytes in segment INITTAB
     8 bytes in segment INTVEC
     2 bytes in segment NEAR_I
     2 bytes in segment NEAR_ID
 6 829 bytes in segment NEAR_Z
 
 1 772 bytes of CODE memory (+ 22 bytes shared)
 6 831 bytes of DATA memory (+  6 bytes shared)

Errors: none
Warnings: none

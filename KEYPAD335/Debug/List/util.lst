###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.30.0.50166/W32 for Atmel AVR    09/Dec/2010  19:39:22 #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  K:\work\SEOHO_VD\KEYPAD335_101203_IAR\source\mcu\util.c  #
#    Command line =  K:\work\SEOHO_VD\KEYPAD335_101203_IAR\source\mcu\util.c  #
#                    --cpu=m2560 -ms -o K:\work\SEOHO_VD\KEYPAD335_101203_IAR #
#                    \Debug\Obj\ -lC K:\work\SEOHO_VD\KEYPAD335_101203_IAR\De #
#                    bug\List\ -lA K:\work\SEOHO_VD\KEYPAD335_101203_IAR\Debu #
#                    g\List\ -y --initializers_in_flash -z3 --no_cse          #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug --enable_external_bus  #
#                    -DENABLE_BIT_DEFINITIONS -e --enable_multibytes -I       #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.3\avr\INC\" -I "C:\Program Files\IAR Systems\Embedded  #
#                    Workbench 5.3\avr\INC\CLIB\" --eeprom_size 4096          #
#    List file    =  K:\work\SEOHO_VD\KEYPAD335_101203_IAR\Debug\List\util.ls #
#                    t                                                        #
#    Object file  =  K:\work\SEOHO_VD\KEYPAD335_101203_IAR\Debug\Obj\util.r90 #
#                                                                             #
#                                                                             #
###############################################################################

K:\work\SEOHO_VD\KEYPAD335_101203_IAR\source\mcu\util.c
      1          //====================================================
      2          //
      3          // Copyright(C) 2008 HanYoung ELEC. Co., LTD.
      4          // Designed by Paul B.H Park(idonno2000)
      5          //
      6          //
      7          //	filename : util.c
      8          //	description : 유틸함수(delay)
      9          //
     10          //	history : - frist designed at 2008-05-28 4:02오후
     11          //
     12          //====================================================
     13          
     14          #include "util.h"
     15          
     16          

   \                                 In  segment FARCODE, align 2, keep-with-next
     17          void Delay_us(unsigned char time_us)		/* time delay for us */
   \                     Delay_us:
     18          { register unsigned char i;
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     19          
     20            for(i = 0; i < time_us; i++)			// 4 cycle +
   \   00000000   E010               LDI     R17, 0
   \   00000002   C007               RJMP    ??Delay_us_0
     21              { asm (" PUSH  R0 ");		// 2 cycle +
   \                     ??Delay_us_1:
   \   00000004   920F               PUSH  R0 
     22                asm (" POP   R0 ");		// 2 cycle +
   \   00000006   900F               POP   R0 
     23                asm (" PUSH  R0 ");		// 2 cycle +
   \   00000008   920F               PUSH  R0 
     24                asm (" POP   R0 ");		// 2 cycle +
   \   0000000A   900F               POP   R0 
     25                asm (" PUSH  R0 ");		// 2 cycle +
   \   0000000C   920F               PUSH  R0 
     26                asm (" POP   R0 ");		// 2 cycle = 16 cycle = 1 us for 16MHz
   \   0000000E   900F               POP   R0 
     27              }
   \   00000010   9513               INC     R17
   \                     ??Delay_us_0:
   \   00000012   1710               CP      R17, R16
   \   00000014   F3B8               BRCS    ??Delay_us_1
     28          }
   \   00000016   9508               RET
     29          

   \                                 In  segment FARCODE, align 2, keep-with-next
     30          void Delay_ms(unsigned int time_ms)		/* time delay for ms */
   \                     Delay_ms:
     31          { register unsigned int i;
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     32          
     33            for(i = 0; i < time_ms; i++)
   \   00000006   E0A0               LDI     R26, 0
   \   00000008   E0B0               LDI     R27, 0
   \   0000000A   C009               RJMP    ??Delay_ms_0
     34              { Delay_us(250);
   \                     ??Delay_ms_1:
   \   0000000C   EF0A               LDI     R16, 250
   \   0000000E   ....               RCALL   Delay_us
     35                Delay_us(250);
   \   00000010   EF0A               LDI     R16, 250
   \   00000012   ....               RCALL   Delay_us
     36                Delay_us(250);
   \   00000014   EF0A               LDI     R16, 250
   \   00000016   ....               RCALL   Delay_us
     37                Delay_us(250);
   \   00000018   EF0A               LDI     R16, 250
   \   0000001A   ....               RCALL   Delay_us
     38              }
   \   0000001C   9611               ADIW    R27:R26, 1
   \                     ??Delay_ms_0:
   \   0000001E   17A8               CP      R26, R24
   \   00000020   07B9               CPC     R27, R25
   \   00000022   F3A0               BRCS    ??Delay_ms_1
     39          }
   \   00000024   E0E4               LDI     R30, 4
   \   00000026   ........           JMP     ?EPILOGUE_B4_L09
     40          
     41          
     42          
     43          /*--- INTERGER TO ASCII CONVERSION ---*/

   \                                 In  segment FARCODE, align 2, keep-with-next
     44          void inttoa(int val, char *str, int len)
   \                     inttoa:
     45          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
     46          	int irem;
     47          	
     48          	switch( len ){
   \   00000008   5041               SUBI    R20, 1
   \   0000000A   4050               SBCI    R21, 0
   \   0000000C   F071               BREQ    ??inttoa_0
   \   0000000E   5041               SUBI    R20, 1
   \   00000010   4050               SBCI    R21, 0
   \   00000012   F071               BREQ    ??inttoa_1
   \   00000014   5041               SUBI    R20, 1
   \   00000016   4050               SBCI    R21, 0
   \   00000018   F0E1               BREQ    ??inttoa_2
   \   0000001A   5041               SUBI    R20, 1
   \   0000001C   4050               SBCI    R21, 0
   \   0000001E   F1C1               BREQ    ??inttoa_3
   \   00000020   5041               SUBI    R20, 1
   \   00000022   4050               SBCI    R21, 0
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C061               RJMP    ??inttoa_4
   \   00000028   C09A               RJMP    ??inttoa_5
     49          		case 1:	*(str+0) = (char)(val + 48);
   \                     ??inttoa_0:
   \   0000002A   5D80               SUBI    R24, 208
   \   0000002C   938C               ST      X, R24
   \   0000002E   C097               RJMP    ??inttoa_5
     50          			break;
     51          		case 2:	*(str+0) = (char)(val/10 + 48);
   \                     ??inttoa_1:
   \   00000030   E04A               LDI     R20, 10
   \   00000032   E050               LDI     R21, 0
   \   00000034   018C               MOVW    R17:R16, R25:R24
   \   00000036   ........           CALL    ?SS_DIVMOD_L02
   \   0000003A   5D00               SUBI    R16, 208
   \   0000003C   930C               ST      X, R16
     52          			irem = val % 10;
   \   0000003E   E04A               LDI     R20, 10
   \   00000040   E050               LDI     R21, 0
   \   00000042   018C               MOVW    R17:R16, R25:R24
   \   00000044   ........           CALL    ?SS_DIVMOD_L02
   \   00000048   01CA               MOVW    R25:R24, R21:R20
     53          			*(str+1) = (char)(irem + 48);
   \   0000004A   5D80               SUBI    R24, 208
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8381               STD     Z+1, R24
   \   00000050   C086               RJMP    ??inttoa_5
     54          			break;
     55          		case 3:	*(str+0) = (char)(val/100 + 48);
   \                     ??inttoa_2:
   \   00000052   E644               LDI     R20, 100
   \   00000054   E050               LDI     R21, 0
   \   00000056   018C               MOVW    R17:R16, R25:R24
   \   00000058   ........           CALL    ?SS_DIVMOD_L02
   \   0000005C   5D00               SUBI    R16, 208
   \   0000005E   930C               ST      X, R16
     56          			irem = val % 100;
   \   00000060   E644               LDI     R20, 100
   \   00000062   E050               LDI     R21, 0
   \   00000064   018C               MOVW    R17:R16, R25:R24
   \   00000066   ........           CALL    ?SS_DIVMOD_L02
   \   0000006A   01CA               MOVW    R25:R24, R21:R20
     57          			*(str+1) = (char)(irem/10 + 48);
   \   0000006C   E04A               LDI     R20, 10
   \   0000006E   E050               LDI     R21, 0
   \   00000070   018C               MOVW    R17:R16, R25:R24
   \   00000072   ........           CALL    ?SS_DIVMOD_L02
   \   00000076   5D00               SUBI    R16, 208
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   8301               STD     Z+1, R16
     58          			irem = irem % 10;
   \   0000007C   E04A               LDI     R20, 10
   \   0000007E   E050               LDI     R21, 0
   \   00000080   018C               MOVW    R17:R16, R25:R24
   \   00000082   ........           CALL    ?SS_DIVMOD_L02
   \   00000086   01CA               MOVW    R25:R24, R21:R20
     59          			*(str+2) = (char)(irem + 48);
   \   00000088   5D80               SUBI    R24, 208
   \   0000008A   01FD               MOVW    R31:R30, R27:R26
   \   0000008C   8382               STD     Z+2, R24
   \   0000008E   C067               RJMP    ??inttoa_5
     60          			break;
     61          		case 4:	*(str+0) = (char)(val/1000 + 48);
   \                     ??inttoa_3:
   \   00000090   EE48               LDI     R20, 232
   \   00000092   E053               LDI     R21, 3
   \   00000094   018C               MOVW    R17:R16, R25:R24
   \   00000096   ........           CALL    ?SS_DIVMOD_L02
   \   0000009A   5D00               SUBI    R16, 208
   \   0000009C   930C               ST      X, R16
     62          			irem = val % 1000;
   \   0000009E   EE48               LDI     R20, 232
   \   000000A0   E053               LDI     R21, 3
   \   000000A2   018C               MOVW    R17:R16, R25:R24
   \   000000A4   ........           CALL    ?SS_DIVMOD_L02
   \   000000A8   01CA               MOVW    R25:R24, R21:R20
     63          			*(str+1) = (char)(irem/100 + 48);
   \   000000AA   E644               LDI     R20, 100
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   018C               MOVW    R17:R16, R25:R24
   \   000000B0   ........           CALL    ?SS_DIVMOD_L02
   \   000000B4   5D00               SUBI    R16, 208
   \   000000B6   01FD               MOVW    R31:R30, R27:R26
   \   000000B8   8301               STD     Z+1, R16
     64          			irem = irem % 100;
   \   000000BA   E644               LDI     R20, 100
   \   000000BC   E050               LDI     R21, 0
   \   000000BE   018C               MOVW    R17:R16, R25:R24
   \   000000C0   ........           CALL    ?SS_DIVMOD_L02
   \   000000C4   01CA               MOVW    R25:R24, R21:R20
     65          			*(str+2) = (char)(irem/10 + 48);
   \   000000C6   E04A               LDI     R20, 10
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   018C               MOVW    R17:R16, R25:R24
   \   000000CC   ........           CALL    ?SS_DIVMOD_L02
   \   000000D0   5D00               SUBI    R16, 208
   \   000000D2   01FD               MOVW    R31:R30, R27:R26
   \   000000D4   8302               STD     Z+2, R16
     66          			irem = irem % 10;
   \   000000D6   E04A               LDI     R20, 10
   \   000000D8   E050               LDI     R21, 0
   \   000000DA   018C               MOVW    R17:R16, R25:R24
   \   000000DC   ........           CALL    ?SS_DIVMOD_L02
   \   000000E0   01CA               MOVW    R25:R24, R21:R20
     67          			*(str+3) = (char)(irem + 48);
   \   000000E2   5D80               SUBI    R24, 208
   \   000000E4   01FD               MOVW    R31:R30, R27:R26
   \   000000E6   8383               STD     Z+3, R24
   \   000000E8   C03A               RJMP    ??inttoa_5
     68          			break;
     69          		case 5:	*(str+0) = (char)(val/10000 + 48);
   \                     ??inttoa_4:
   \   000000EA   E140               LDI     R20, 16
   \   000000EC   E257               LDI     R21, 39
   \   000000EE   018C               MOVW    R17:R16, R25:R24
   \   000000F0   ........           CALL    ?SS_DIVMOD_L02
   \   000000F4   5D00               SUBI    R16, 208
   \   000000F6   930C               ST      X, R16
     70          			irem = val % 10000;
   \   000000F8   E140               LDI     R20, 16
   \   000000FA   E257               LDI     R21, 39
   \   000000FC   018C               MOVW    R17:R16, R25:R24
   \   000000FE   ........           CALL    ?SS_DIVMOD_L02
   \   00000102   01CA               MOVW    R25:R24, R21:R20
     71          			*(str+1) = (char)(irem/1000 + 48);
   \   00000104   EE48               LDI     R20, 232
   \   00000106   E053               LDI     R21, 3
   \   00000108   018C               MOVW    R17:R16, R25:R24
   \   0000010A   ........           CALL    ?SS_DIVMOD_L02
   \   0000010E   5D00               SUBI    R16, 208
   \   00000110   01FD               MOVW    R31:R30, R27:R26
   \   00000112   8301               STD     Z+1, R16
     72          			irem = irem % 1000;
   \   00000114   EE48               LDI     R20, 232
   \   00000116   E053               LDI     R21, 3
   \   00000118   018C               MOVW    R17:R16, R25:R24
   \   0000011A   ........           CALL    ?SS_DIVMOD_L02
   \   0000011E   01CA               MOVW    R25:R24, R21:R20
     73          			*(str+2) = (char)(irem/100 + 48);
   \   00000120   E644               LDI     R20, 100
   \   00000122   E050               LDI     R21, 0
   \   00000124   018C               MOVW    R17:R16, R25:R24
   \   00000126   ........           CALL    ?SS_DIVMOD_L02
   \   0000012A   5D00               SUBI    R16, 208
   \   0000012C   01FD               MOVW    R31:R30, R27:R26
   \   0000012E   8302               STD     Z+2, R16
     74          			irem = irem % 100;
   \   00000130   E644               LDI     R20, 100
   \   00000132   E050               LDI     R21, 0
   \   00000134   018C               MOVW    R17:R16, R25:R24
   \   00000136   ........           CALL    ?SS_DIVMOD_L02
   \   0000013A   01CA               MOVW    R25:R24, R21:R20
     75          			*(str+3) = (char)(irem/10 + 48);
   \   0000013C   E04A               LDI     R20, 10
   \   0000013E   E050               LDI     R21, 0
   \   00000140   018C               MOVW    R17:R16, R25:R24
   \   00000142   ........           CALL    ?SS_DIVMOD_L02
   \   00000146   5D00               SUBI    R16, 208
   \   00000148   01FD               MOVW    R31:R30, R27:R26
   \   0000014A   8303               STD     Z+3, R16
     76          			irem = irem % 10;
   \   0000014C   E04A               LDI     R20, 10
   \   0000014E   E050               LDI     R21, 0
   \   00000150   018C               MOVW    R17:R16, R25:R24
   \   00000152   ........           CALL    ?SS_DIVMOD_L02
   \   00000156   01CA               MOVW    R25:R24, R21:R20
     77          			*(str+4) = (char)(irem + 48);
   \   00000158   5D80               SUBI    R24, 208
   \   0000015A   01FD               MOVW    R31:R30, R27:R26
   \   0000015C   8384               STD     Z+4, R24
     78          			break;
     79          		default: break;	
     80          	}
     81          }
   \                     ??inttoa_5:
   \   0000015E   E0E4               LDI     R30, 4
   \   00000160   ........           JMP     ?EPILOGUE_B4_L09
     82          
     83          
     84          

   Maximum stack usage in bytes:

     Function      CSTACK RSTACK
     --------      ------ ------
     Delay_ms          4      3
       -> Delay_us     4      3
       -> Delay_us     4      3
       -> Delay_us     4      3
       -> Delay_us     4      3
     Delay_us          0      3
     inttoa            4      6


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     Delay_us         24
     Delay_ms         42
     inttoa          356

 
 422 bytes in segment FARCODE
 
 422 bytes of CODE memory

Errors: none
Warnings: none
